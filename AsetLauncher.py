import requests  # For fetching Mojang manifest
import subprocess
from uuid import uuid1
import uuid as _uuid
import hashlib
from random_username.generate import generate_username
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QIcon
import os
import json
import bcrypt  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º bcrypt
import time
import sys
import webbrowser  # –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ Minecraft
from functools import partial # Import partial
import logging  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
import zipfile
from PyQt5.QtWidgets import QFileDialog, QMessageBox
import shutil
import threading  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º threading
import concurrent.futures  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
import ctypes
import re
from PyQt5.QtCore import QPropertyAnimation, QEasingCurve, QRect, pyqtSignal
from PyQt5.QtWidgets import QScrollArea, QFrame
def get_total_ram_gb():
    try:
        import ctypes
        class MEMORYSTATUSEX(ctypes.Structure):
            _fields_ = [
                ("dwLength", ctypes.c_ulong),
                ("dwMemoryLoad", ctypes.c_ulong),
                ("ullTotalPhys", ctypes.c_ulonglong),
                ("ullAvailPhys", ctypes.c_ulonglong),
                ("ullTotalPageFile", ctypes.c_ulonglong),
                ("ullAvailPageFile", ctypes.c_ulonglong),
                ("ullTotalVirtual", ctypes.c_ulonglong),
                ("ullAvailVirtual", ctypes.c_ulonglong),
                ("sullAvailExtendedVirtual", ctypes.c_ulonglong),
            ]
        stat = MEMORYSTATUSEX()
        stat.dwLength = ctypes.sizeof(MEMORYSTATUSEX)
        ctypes.windll.kernel32.GlobalMemoryStatusEx(ctypes.byref(stat))
        return max(0, int(stat.ullTotalPhys // (1024**3)))
    except Exception:
        return 8

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è - –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–≥—Ä—É–∑–∫–∏, —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –∑–∞–ø—É—Å–∫–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler(os.path.join(os.path.dirname(__file__), 'logs', 'launcher.log'), encoding='utf-8')
    ]
)
# –û—Ç–∫–ª—é—á–∞–µ–º debug –ª–æ–≥–∏ –¥–ª—è urllib3 –∏ requests, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º INFO
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('requests').setLevel(logging.INFO)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞
class _CloseButtonHelper(QtCore.QObject):
    def __init__(self, host_widget, button, margin=5):
        super().__init__(host_widget)
        self.host_widget = host_widget
        self.button = button
        self.margin = margin

    def eventFilter(self, obj, event):
        if obj is self.host_widget and event.type() == QtCore.QEvent.Resize:
            try:
                w = self.host_widget.width()
                self.button.move(w - self.button.width() - self.margin, self.margin)
                self.button.raise_()
            except Exception:
                pass
        return False

def attach_close_button(host_widget, button, margin=5):
    helper = _CloseButtonHelper(host_widget, button, margin)
    host_widget.installEventFilter(helper)
    # –•—Ä–∞–Ω–∏–º —Å—Å—ã–ª–∫—É, —á—Ç–æ–±—ã helper –Ω–µ –±—ã–ª —Å–æ–±—Ä–∞–Ω GC
    setattr(host_widget, "_close_button_helper", helper)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∫—ç—à
DEFAULT_HTTP_TIMEOUT = 10
_MOJANG_MANIFEST_CACHE = None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ Minecraft
def get_minecraft_directory():
    return os.path.expanduser("~/.minecraft_asetlauncher")

minecraft_directory = get_minecraft_directory()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—É—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ª–∞—É–Ω—á–µ—Ä–∞
if getattr(sys, 'frozen', False):
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É–ø–∞–∫–æ–≤–∞–Ω–æ –≤ .exe
    BASE_DIR = os.path.dirname(sys.executable)
else:
    # –ï—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –∫–æ–¥–∞
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
IMAGES_DIR = os.path.join(BASE_DIR, 'build', 'images')
LAUNCHER_FILES_DIR = os.path.join(BASE_DIR, 'build', 'Launcher_Files')
RESOURCE_PACKS_DIR = os.path.join(BASE_DIR, 'build', 'Resourse_packs')
AVATARS_DIR = os.path.join(IMAGES_DIR, 'avatars')

# –û–±–Ω–æ–≤–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –∞–∫–∫–∞—É–Ω—Ç–æ–≤
ACCOUNTS_FILE = os.path.join(LAUNCHER_FILES_DIR, "accounts.json")
# –ë—ç–∫–µ–Ω–¥ —Å–∞–π—Ç–∞ AsetLauncher –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —Å–µ—Å—Å–∏–π
BACKEND_BASE_URL = "http://89.250.150.135:5500"
AUTH_ENDPOINT = BACKEND_BASE_URL + "/authserver/authenticate"
REFRESH_ENDPOINT = BACKEND_BASE_URL + "/authserver/refresh"
VALIDATE_ENDPOINT = BACKEND_BASE_URL + "/authserver/validate"
PROFILE_SETTINGS_FILE = os.path.join(LAUNCHER_FILES_DIR, "profile_settings.json")
FRIENDS_FILE = os.path.join(LAUNCHER_FILES_DIR, "friends.json")
FRIENDS_AVATARS_DIR = os.path.join(LAUNCHER_FILES_DIR, "friends_avatars")

HOSTS_PATH = r"C:\Windows\System32\drivers\etc\hosts"
REDIRECTS = [
    "89.250.150.135 authserver.mojang.com",
    "89.250.150.135 sessionserver.mojang.com",
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã Mojang –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
]

def is_admin():
    try:
        return ctypes.windll.shell32.IsUserAnAdmin()
    except:
        return False

def add_hosts_redirects():
    logging.info("üîß –ù–∞—á–∏–Ω–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ hosts —Ñ–∞–π–ª–∞...")
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {is_admin()}")
    
    if not is_admin():
        logging.warning("‚ùå –î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è hosts-—Ñ–∞–π–ª–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return False
    
    try:
        logging.info(f"üìÇ –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–∫—Ä—ã—Ç—å hosts —Ñ–∞–π–ª: {HOSTS_PATH}")
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
        try:
            with open(HOSTS_PATH, "r", encoding="utf-8") as f:
                content = f.read()
        except UnicodeDecodeError:
            # Fallback –Ω–∞ ANSI –∫–æ–¥–∏—Ä–æ–≤–∫—É –µ—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            with open(HOSTS_PATH, "r", encoding="cp1251") as f:
                content = f.read()
        
        logging.info(f"üìÑ Hosts —Ñ–∞–π–ª –ø—Ä–æ—á–∏—Ç–∞–Ω, —Ä–∞–∑–º–µ—Ä: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ —Å—Ç—Ä–æ–∫–∏ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
        lines_to_add = []
        for redirect in REDIRECTS:
            # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º IP –∏ –¥–æ–º–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
            ip_part = redirect.split()[0]  # 89.250.150.135
            domain_part = redirect.split()[1]  # authserver.mojang.com
            
            if ip_part in content and domain_part in content:
                logging.info(f"‚úÖ –£–∂–µ –µ—Å—Ç—å: {redirect}")
            else:
                lines_to_add.append(redirect)
                logging.info(f"‚ûï –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å: {redirect}")
                logging.info(f"   IP {ip_part} –≤ —Ñ–∞–π–ª–µ: {ip_part in content}")
                logging.info(f"   –î–æ–º–µ–Ω {domain_part} –≤ —Ñ–∞–π–ª–µ: {domain_part in content}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if lines_to_add:
            try:
                with open(HOSTS_PATH, "a", encoding="utf-8") as f:
                    for line in lines_to_add:
                        f.write("\n" + line)
                        logging.info(f"üìù –ó–∞–ø–∏—Å–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: {line}")
                    f.flush()  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞–ø–∏—Å—å
                logging.info(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(lines_to_add)} —Å—Ç—Ä–æ–∫ –≤ hosts —Ñ–∞–π–ª")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
                with open(HOSTS_PATH, "r", encoding="utf-8") as f:
                    new_content = f.read()
                    for line in lines_to_add:
                        if line in new_content:
                            logging.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å: {line}")
                        else:
                            logging.error(f"‚ùå –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ —Ñ–∞–π–ª–µ: {line}")
                            
            except PermissionError as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ hosts: {e}")
                return False
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ hosts: {e}")
                return False
        else:
            logging.info("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        
        return True
        
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ hosts-—Ñ–∞–π–ª–∞: {e}")
        logging.error(f"‚ùå –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e).__name__}")
        return False

def remove_hosts_redirects():
    if not is_admin():
        logging.warning("–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è hosts-—Ñ–∞–π–ª–∞ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    try:
        with open(HOSTS_PATH, "r", encoding="utf-8") as f:
            lines = f.readlines()
        with open(HOSTS_PATH, "w", encoding="utf-8") as f:
            for line in lines:
                if not any(domain in line for domain in [
                    "authserver.mojang.com",
                    "sessionserver.mojang.com",
                    "api.minecraftservices.com",
                    "services.minecraft.net",
                    "account.mojang.com"
                ]):
                    f.write(line)
        logging.info("–°—Ç—Ä–æ–∫–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ hosts-—Ñ–∞–π–ª–∞.")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ hosts-—Ñ–∞–π–ª–∞: {e}")

def register_account(username, password):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫–∫–∞—É–Ω—Ç
    if load_accounts():
        logging.warning("–ê–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.")
        return False

    hashed_password = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())
    accounts = [{"username": username, "password": hashed_password.decode('utf-8')}]
    save_accounts(accounts)
    return True

def _save_authenticated_account(nickname, access_token, client_token, uuid_no_dashes):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–æ–∫–µ–Ω–∞–º–∏
    data = [{
        "username": nickname,
        "accessToken": access_token,
        "clientToken": client_token,
        "uuid": uuid_no_dashes,
    }]
    save_accounts(data)


def _backend_authenticate(username, password):
    try:
        payload = {
            "username": username,
            "password": password,
            # clientToken –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω; –±—ç–∫–µ–Ω–¥ —Å–æ–∑–¥–∞—Å—Ç, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        }
        r = requests.post(AUTH_ENDPOINT, json=payload, timeout=10)
        if r.status_code != 200:
            return None
        d = r.json()
        access_token = d.get("accessToken")
        client_token = d.get("clientToken")
        prof = d.get("selectedProfile") or {}
        uuid_no_dashes = prof.get("id")
        name = prof.get("name") or username
        if access_token and client_token and uuid_no_dashes:
            _save_authenticated_account(name, access_token, client_token, uuid_no_dashes)
            return {
                "username": name,
                "accessToken": access_token,
                "clientToken": client_token,
                "uuid": uuid_no_dashes,
            }
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –±–µ–∫–µ–Ω–¥—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    return None


def login_account(username, password):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –±—ç–∫–µ–Ω–¥. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –ø—Ä–∏ —É—Å–ø–µ—Ö–µ."""
    auth = _backend_authenticate(username, password)
    return bool(auth)

def delete_account():
    """–£–¥–∞–ª—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç."""
    save_accounts([])  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
    logging.info("–ê–∫–∫–∞—É–Ω—Ç —É–¥–∞–ª–µ–Ω.")
    return True

def load_accounts():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(ACCOUNTS_FILE, "r") as f:
            accounts = json.load(f)
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —É –Ω–∞—Å –Ω–µ –±–æ–ª—å—à–µ –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞
            if len(accounts) > 1:
                logging.warning("–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π.")
                return [accounts[0]]
            return accounts
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        return []

def save_accounts(accounts):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Ñ–∞–π–ª."""
    # Ensure the directory exists before saving the file
    os.makedirs(LAUNCHER_FILES_DIR, exist_ok=True)

    with open(ACCOUNTS_FILE, "w") as f:
        json.dump(accounts, f)

def load_friends():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –∏–∑ —Ñ–∞–π–ª–∞."""
    try:
        with open(FRIENDS_FILE, "r", encoding="utf-8") as f:
            friends = json.load(f)
            if isinstance(friends, list):
                return friends
            return []
    except FileNotFoundError:
        return []
    except json.JSONDecodeError:
        return []

def save_friends(friends):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π –≤ —Ñ–∞–π–ª."""
    os.makedirs(LAUNCHER_FILES_DIR, exist_ok=True)
    with open(FRIENDS_FILE, "w", encoding="utf-8") as f:
        json.dump(friends, f, ensure_ascii=False)

def clear_saved_accounts():
    """–û—á–∏—â–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã"""
    try:
        if os.path.exists(ACCOUNTS_FILE):
            os.remove(ACCOUNTS_FILE)
            logging.info("–°—Ç–∞—Ä—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã –æ—á–∏—â–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤: {e}")

def sync_token_with_backend():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ—Ç —Ç–æ–∫–µ–Ω –ª–∞—É–Ω—á–µ—Ä–∞ —Å backend –¥–ª—è API –¥—Ä—É–∑–µ–π"""
    try:
        accounts = load_accounts()
        if not accounts or not accounts[0].get('accessToken'):
            return False
            
        account = accounts[0]
        access_token = account.get('accessToken')
        client_token = account.get('clientToken')
        
        if not access_token or not client_token:
            return False
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é
        session = requests.Session()
        data = {
            'access_token': access_token,
            'client_token': client_token
        }
        response = session.post(f"{BACKEND_BASE_URL}/api/auth/sync-token", json=data, timeout=10)
        
        if response.status_code == 200:
            result = response.json()
            if result.get('ok'):
                return True
        elif response.status_code == 404:
            # –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ device_codes - –∑–Ω–∞—á–∏—Ç –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
            return "reauth_required"
        
        return False
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        return False

def get_auth_headers(auto_sync_on_fail=True):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        accounts = load_accounts()
        if accounts and len(accounts) > 0:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç (—É –Ω–∞—Å –≤—Å–µ–≥–¥–∞ –æ–¥–∏–Ω –∞–∫—Ç–∏–≤–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç)
            current_account = accounts[0]
            if current_account and current_account.get('accessToken'):
                token = current_account["accessToken"]
                return {'Authorization': f'Bearer {token}'}
        logging.warning("–ù–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {e}")
    return {}

def fetch_profile_by_uuid(friend_uuid):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞ –ø–æ UUID –Ω–∞ –±—ç–∫–µ–Ω–¥–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict {username, uuid, avatar_url?}.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –±—ç–∫–µ–Ω–¥ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É /api/profile/<uuid>.
    """
    try:
        url = f"{BACKEND_BASE_URL}/api/profile/{friend_uuid}"
        r = requests.get(url, timeout=10)
        if not r.ok:
            return None
        d = r.json()
        # –£–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª—é—á–∏
        return {
            "username": d.get("username") or d.get("name"),
            "uuid": d.get("uuid") or d.get("id") or friend_uuid,
            "avatar_url": d.get("avatar_url") or d.get("avatar")
        }
    except Exception:
        return None

def download_avatar(url, uuid_str):
    """–°–∫–∞—á–∏–≤–∞–µ—Ç –∞–≤–∞—Ç–∞—Ä –¥—Ä—É–≥–∞ –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å, –ª–∏–±–æ None."""
    try:
        if not url:
            return None
        os.makedirs(FRIENDS_AVATARS_DIR, exist_ok=True)
        local_path = os.path.join(FRIENDS_AVATARS_DIR, f"{uuid_str}.png")
        resp = requests.get(url, timeout=10)
        if resp.ok:
            with open(local_path, "wb") as f:
                f.write(resp.content)
            return local_path
    except Exception:
        pass
    return None

class LoginDialog(QtWidgets.QDialog):
    def __init__(self, main_window, ui):  # –ü–µ—Ä–µ–¥–∞—ë–º —Å—Å—ã–ª–∫—É –Ω–∞ Ui_MainWindow
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–í—Ö–æ–¥ / –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        self.setModal(True)
        self.setFixedSize(300, 250)  # –ú–µ–Ω—å—à–∏–π —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (–∫–∞–∫ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é)
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.username_label = QtWidgets.QLabel("–ù–∏–∫:")
        self.username_input = QtWidgets.QLineEdit()
        self.username_input.setMaxLength(20)
        self.password_label = QtWidgets.QLabel("–ü–∞—Ä–æ–ª—å:")
        self.password_input = QtWidgets.QLineEdit()
        self.password_input.setMaxLength(20)
        self.password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.show_password_button = QtWidgets.QPushButton("–ü–æ–∫–∞–∑–∞—Ç—å", self)
        self.show_password_button.setCheckable(True)  # –ö–Ω–æ–ø–∫–∞-–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å
        self.show_password_button.clicked.connect(self.toggle_password_visibility)

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        self.username_input.setStyleSheet("background-color: #44475a; color: #ffffff; border: none; border-radius: 4px; padding: 3px;")
        self.password_input.setStyleSheet("background-color: #44475a; color: #ffffff; border: none; border-radius: 4px; padding: 3px;")

        self.login_button = QtWidgets.QPushButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∞–π—Ç")
        self.register_button = QtWidgets.QPushButton("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
        self.delete_button = QtWidgets.QPushButton("–£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç")

        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.login_button.setStyleSheet(button_style)
        self.register_button.setStyleSheet(button_style)
        self.delete_button.setStyleSheet(button_style)
        self.show_password_button.setStyleSheet(button_style)  # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª—å –∫ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–∞—Ä–æ–ª—è

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.username_label)
        layout.addWidget(self.username_input)
        layout.addWidget(self.password_label)

        # Layout –¥–ª—è –ø–∞—Ä–æ–ª—è –∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å"
        password_layout = QtWidgets.QHBoxLayout()
        password_layout.addWidget(self.password_input)
        password_layout.addWidget(self.show_password_button)
        layout.addLayout(password_layout)  # –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç–æ—Ç layout –≤ –æ—Å–Ω–æ–≤–Ω–æ–π

        layout.addWidget(self.login_button)

        # –ï—Å–ª–∏ –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è, –∏–Ω–∞—á–µ - —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if load_accounts():
            layout.addWidget(self.delete_button)
            self.register_button.hide()
        else:
            layout.addWidget(self.register_button)
            self.delete_button.hide()

        self.setLayout(layout)

        self.login_button.clicked.connect(self.login)
        self.register_button.clicked.connect(self.register)
        self.delete_button.clicked.connect(self.delete)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é –∏ Z-–ø–æ—Ä—è–¥–æ–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–≤–µ—Ä—Ö –ª—ç–π–∞—É—Ç–∞
        try:
            if hasattr(self, 'close_btn') and self.close_btn is not None:
                self.close_btn.move(self.width() - self.close_btn.width() - 5, 5)
                self.close_btn.raise_()
        except Exception:
            pass

    def toggle_password_visibility(self):
        if self.show_password_button.isChecked():
            self.password_input.setEchoMode(QtWidgets.QLineEdit.Normal)
            self.show_password_button.setText("–°–∫—Ä—ã—Ç—å")
        else:
            self.password_input.setEchoMode(QtWidgets.QLineEdit.Password)
            self.show_password_button.setText("–ü–æ–∫–∞–∑–∞—Ç—å")

    def login(self):
        try:
            # Device flow: –ø–æ–ª—É—á–∞–µ–º –∫–æ–¥ –Ω–∞ –±–µ–∫–µ–Ω–¥–µ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –±—Ä–∞—É–∑–µ—Ä
            r = requests.post(BACKEND_BASE_URL + '/api/device/start', timeout=10)
            d = r.json()
            verify_url = d.get('verification_uri')
            device_code = d.get('device_code')
            if not verify_url or not device_code:
                QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.")
                return
            import webbrowser
            webbrowser.open(verify_url)
            # –ü—É–ª–∏–Ω–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            for _ in range(200):  # ~10 –º–∏–Ω—É—Ç —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 3—Å
                time.sleep(3)
                pr = requests.post(BACKEND_BASE_URL + '/api/device/poll', json={'device_code': device_code}, timeout=10)
                if pr.status_code == 202:
                    continue
                pd = pr.json()
                if pr.ok and pd.get('ok'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥
                    _save_authenticated_account(pd['username'], pd['accessToken'], pd['clientToken'], pd['uuid'])
                    self.main_window.last_login_time = time.time()
                    self.accept()
                    return
                else:
                    QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", pd.get('message','–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è.'))
                    return
            QtWidgets.QMessageBox.warning(self, "–¢–∞–π–º–∞—É—Ç", "–í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"{e}")

    def register(self):
        import webbrowser
        webbrowser.open(BACKEND_BASE_URL + '/register.html')

    def delete(self):
        reply = QtWidgets.QMessageBox.question(self, '–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞',
                                                   "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç?",
                                                   QtWidgets.QMessageBox.Yes | QtWidgets.QMessageBox.No, QtWidgets.QMessageBox.No)

        if reply == QtWidgets.QMessageBox.Yes:
            if delete_account():
                QtWidgets.QMessageBox.information(self, "–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞", "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.")
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
                self.main_window.show_login_dialog()
                self.close()

class ProfileDialog(QtWidgets.QDialog):
    def __init__(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è")
        self.setModal(True)
        self.setFixedSize(300, 280)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.current_username = ""
        accounts = load_accounts()
        if accounts:
            self.current_username = accounts[0]["username"]

        # Add a QLabel for the skin head
        self.skin_head_label = QtWidgets.QLabel(self)
        self.skin_head_label.setAlignment(QtCore.Qt.AlignCenter)
        self.update_skin_head()

        # Add username label under skin head
        self.username_label = QtWidgets.QLabel(self)
        self.username_label.setAlignment(QtCore.Qt.AlignCenter)
        self.username_label.setStyleSheet("color:#ffffff; font-size:14px; font-weight:600;")
        self.update_username_label()

        # –ù–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏
        self.account_data_button = QtWidgets.QPushButton("–ê–∫–∫–∞—É–Ω—Ç")
        # self.skin_settings_button = QtWidgets.QPushButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∏–Ω–∞")  # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        self.profile_avatars_button = QtWidgets.QPushButton("–ê–≤–∞—Ç–∞—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è")
        self.logout_button = QtWidgets.QPushButton("–í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")

        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.account_data_button.setStyleSheet(button_style)
        # self.skin_settings_button.setStyleSheet(button_style)  # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        self.profile_avatars_button.setStyleSheet(button_style)
        
        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–∫–∏ –≤—ã—Ö–æ–¥–∞ (–∫—Ä–∞—Å–Ω—ã–π)
        logout_style = """
            QPushButton {
                background-color: #e06c75;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #c86470;
            }
        """
        self.logout_button.setStyleSheet(logout_style)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.skin_head_label)
        layout.addWidget(self.username_label)
        layout.addWidget(self.account_data_button)
        # layout.addWidget(self.skin_settings_button)  # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        layout.addWidget(self.profile_avatars_button)
        layout.addWidget(self.logout_button)

        self.setLayout(layout)

        self.account_data_button.clicked.connect(self.open_account_data_dialog)
        # self.skin_settings_button.clicked.connect(self.open_skin_settings)  # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        self.profile_avatars_button.clicked.connect(self.open_avatar_selection)
        self.logout_button.clicked.connect(self.logout_account)

    def update_skin_head(self):
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –≤–º–µ—Å—Ç–æ —Å–∫–∏–Ω–æ–≤
        try:
            default_avatar = QtGui.QPixmap(os.path.join(IMAGES_DIR, "profile-icon.png"))
            if not default_avatar.isNull():
                scaled_avatar = default_avatar.scaled(64, 64, QtCore.Qt.KeepAspectRatio, QtCore.Qt.FastTransformation)
                self.skin_head_label.setPixmap(scaled_avatar)
            else:
                self.skin_head_label.setText("üë§")
        except Exception:
            self.skin_head_label.setText("üë§")

    def update_username_label(self):
        accounts = load_accounts()
        if accounts:
            self.username_label.setText(accounts[0]["username"])
        else:
            self.username_label.setText("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")

    def open_change_nickname_dialog(self):
        dialog = ChangeNicknameDialog(self.main_window, self)
        dialog.exec_()

    def open_change_password_dialog(self):
        dialog = ChangePasswordDialog(self.main_window, self)
        dialog.exec_()

    def open_skin_settings(self):
        # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        QtWidgets.QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–§—É–Ω–∫—Ü–∏—è —Å–∫–∏–Ω–æ–≤ —É–¥–∞–ª–µ–Ω–∞")

    def open_account_data_dialog(self):
        dlg = AccountDataDialog(self.main_window, self.ui)
        dlg.exec_()

    def open_avatar_selection(self):
        dlg = AvatarSelectionDialog(self.main_window, self.ui)
        if dlg.exec_() == QtWidgets.QDialog.Accepted:
            try:
                self.ui.apply_profile_avatar_icon()
            except Exception:
                pass
    
    def logout_account(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è"""
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Question)
        msg.setWindowTitle("–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        msg.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n–≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥—Ä—É–∑–µ–π.")
        msg.addButton("–í—ã–π—Ç–∏", QtWidgets.QMessageBox.AcceptRole)
        msg.addButton("–û—Ç–º–µ–Ω–∞", QtWidgets.QMessageBox.RejectRole)
        
        result = msg.exec_()
        if result == 0:  # –í—ã–π—Ç–∏
            # –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ logout_account –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
            self.ui.logout_account()
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è
            self.accept()

class ChangeNicknameDialog(QtWidgets.QDialog):  # –î–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã –Ω–∏–∫–∞
    def __init__(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫")
        self.setModal(True)
        self.setFixedSize(300, 150)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.new_username_label = QtWidgets.QLabel("–ù–æ–≤—ã–π –Ω–∏–∫:")
        self.new_username_input = QtWidgets.QLineEdit()
        self.new_username_input.setMaxLength(20)

        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_style = "background-color: #44475a; color: #ffffff; border: none; border-radius: 4px; padding: 3px;"
        self.new_username_input.setStyleSheet(input_style)

        self.save_button = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_button = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.save_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)

        self.error_label = QtWidgets.QLabel("")
        self.error_label.setStyleSheet("color: red;")
        self.error_label.setAlignment(QtCore.Qt.AlignCenter)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.new_username_label)
        layout.addWidget(self.new_username_input)
        layout.addWidget(self.error_label)

        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        self.save_button.clicked.connect(self.save_changes)
        self.cancel_button.clicked.connect(self.reject)

    def save_changes(self):
        new_username = self.new_username_input.text()

        if not new_username:
            self.error_label.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–∏–∫.")
            return

        if len(new_username) > 20:
            self.error_label.setText("–ù–∏–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        accounts = load_accounts()
        if accounts:
            accounts[0]["username"] = new_username
            save_accounts(accounts)
            self.error_label.setText("–ù–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
            self.accept()
            # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∏–∫–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ –≤ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ—Ñ–∏–ª—è
        else:
            self.error_label.setText("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

class ChangePasswordDialog(QtWidgets.QDialog):  # –î–∏–∞–ª–æ–≥ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è
    def __init__(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        self.setModal(True)
        self.setFixedSize(300, 200)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.password_label = QtWidgets.QLabel("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        self.password_input = QtWidgets.QLineEdit()
        self.password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password_input.setMaxLength(20)
        self.password_input.setStyleSheet("background-color: #44475a; color: #ffffff; border: none; border-radius: 4px; padding: 3px;")
        self.save_button = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_button.setStyleSheet("""
            QPushButton { background-color: #61afef; color: #ffffff; border: none; border-radius: 4px; padding: 5px 10px; font-size: 12px; }
            QPushButton:hover { background-color: #508acc; }
        """)
        self.error_label = QtWidgets.QLabel("")
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.password_label)
        layout.addWidget(self.password_input)
        layout.addWidget(self.save_button)
        layout.addWidget(self.error_label)
        self.setLayout(layout)
        self.save_button.clicked.connect(self.save_new_password)

    def save_new_password(self):
        new_password = self.password_input.text()
        if not new_password:
            self.error_label.setText("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å.")
            return
        if len(new_password) > 20:
            self.error_label.setText("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return
        accounts = load_accounts()
        if accounts:
            hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
            accounts[0]["password"] = hashed_password.decode('utf-8')
            save_accounts(accounts)
            self.error_label.setText("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
            self.accept()
        else:
            self.error_label.setText("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

class AccountDataDialog(QtWidgets.QDialog):
    def __init__(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞")
        self.setModal(True)
        self.setFixedSize(320, 220)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.change_nickname_button = QtWidgets.QPushButton("–°–º–µ–Ω–∏—Ç—å –Ω–∏–∫")
        self.change_password_button = QtWidgets.QPushButton("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        button_style = """
            QPushButton { background-color: #61afef; color: #ffffff; border: none; border-radius: 4px; padding: 5px 10px; font-size: 12px; }
            QPushButton:hover { background-color: #508acc; }
        """
        self.change_nickname_button.setStyleSheet(button_style)
        self.change_password_button.setStyleSheet(button_style)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.change_nickname_button)
        layout.addWidget(self.change_password_button)
        self.setLayout(layout)

        self.change_nickname_button.clicked.connect(self.open_change_nickname_dialog)
        self.change_password_button.clicked.connect(self.open_change_password_dialog)

    def open_change_nickname_dialog(self):
        dialog = ChangeNicknameDialog(self.main_window, self.ui)
        dialog.exec_()

    def open_change_password_dialog(self):
        dialog = ChangePasswordDialog(self.main_window, self.ui)
        dialog.exec_()

class AvatarSelectionDialog(QtWidgets.QDialog):
    def __init__(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–ê–≤–∞—Ç–∞—Ä—ã –ø—Ä–æ—Ñ–∏–ª—è")
        self.setModal(True)
        self.setFixedSize(400, 260)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        # –¢—Ä–∏ –∞–≤–∞—Ç–∞—Ä–∞ –≤ —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–í—ã–±—Ä–∞—Ç—å"
        names = [
            ("–ö—Ä–∏–ø–µ—Ä_–Ω—è—à–∞", os.path.join(AVATARS_DIR, "–ö—Ä–∏–ø–µ—Ä_–Ω—è—à–∞.png")),
            ("–ö–ª–∞—Å—Å–∏–∫–∞", os.path.join(AVATARS_DIR, "–ö–ª–∞—Å—Å–∏–∫–∞.png")),
            ("–°—Ç–∞–Ω–¥–∞—Ä—Ç", os.path.join(AVATARS_DIR, "–°—Ç–∞–Ω–¥–∞—Ä—Ç.png")),
        ]

        grid = QtWidgets.QGridLayout()
        for idx, (title, path) in enumerate(names):
            col = idx
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            img_label = QtWidgets.QLabel()
            img_label.setAlignment(QtCore.Qt.AlignCenter)
            if os.path.exists(path):
                pix = QtGui.QPixmap(path).scaled(96, 96, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
                img_label.setPixmap(pix)
            else:
                img_label.setText(title)
            grid.addWidget(img_label, 0, col)
            # –ö–Ω–æ–ø–∫–∞ –í—ã–±—Ä–∞—Ç—å
            btn = QtWidgets.QPushButton("–í—ã–±—Ä–∞—Ç—å")
            btn.setStyleSheet("""
                QPushButton { background-color: #61afef; color: #ffffff; border: none; border-radius: 4px; padding: 5px 10px; }
                QPushButton:hover { background-color: #508acc; }
            """)
            btn.clicked.connect(lambda _, p=path: self.choose_avatar(p))
            grid.addWidget(btn, 1, col)

        root = QtWidgets.QVBoxLayout()
        root.addLayout(grid)
        self.setLayout(root)

    def choose_avatar(self, path):
        try:
            settings = {}
            if os.path.exists(PROFILE_SETTINGS_FILE):
                with open(PROFILE_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
            settings['profile_avatar_path'] = path
            os.makedirs(LAUNCHER_FILES_DIR, exist_ok=True)
            with open(PROFILE_SETTINGS_FILE, 'w', encoding='utf-8') as f:
                json.dump(settings, f, ensure_ascii=False)
        except Exception:
            pass
        self.accept()
    def __init__password_dialog(self, main_window, ui):
        super().__init__()
        self.main_window = main_window
        self.ui = ui
        self.setWindowTitle("–°–º–µ–Ω–∏—Ç—å –ø–∞—Ä–æ–ª—å")
        self.setModal(True)
        self.setFixedSize(300, 200)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
        except Exception:
            pass

        self.new_password_label = QtWidgets.QLabel("–ù–æ–≤—ã–π –ø–∞—Ä–æ–ª—å:")
        self.new_password_input = QtWidgets.QLineEdit()
        self.new_password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.new_password_input.setMaxLength(20)

        self.confirm_password_label = QtWidgets.QLabel("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        self.confirm_password_input = QtWidgets.QLineEdit()
        self.confirm_password_input.setEchoMode(QtWidgets.QLineEdit.Password)
        self.confirm_password_input.setMaxLength(20)

        # –°—Ç–∏–ª—å –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        input_style = "background-color: #44475a; color: #ffffff; border: none; border-radius: 4px; padding: 3px;"
        self.new_password_input.setStyleSheet(input_style)
        self.confirm_password_input.setStyleSheet(input_style)

        self.save_button = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_button = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")

        # –°—Ç–∏–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.save_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)

        self.error_label = QtWidgets.QLabel("")
        self.error_label.setStyleSheet("color: red;")
        self.error_label.setAlignment(QtCore.Qt.AlignCenter)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.new_password_label)
        layout.addWidget(self.new_password_input)
        layout.addWidget(self.confirm_password_label)
        layout.addWidget(self.confirm_password_input)
        layout.addWidget(self.error_label)

        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

        self.save_button.clicked.connect(self.save_changes)
        self.cancel_button.clicked.connect(self.reject)

    def save_changes(self):
        new_password = self.new_password_input.text()
        confirm_password = self.confirm_password_input.text()

        if not new_password or not confirm_password:
            self.error_label.setText("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è.")
            return

        if new_password != confirm_password:
            self.error_label.setText("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.")
            return

        if len(new_password) > 20:
            self.error_label.setText("–ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 20 —Å–∏–º–≤–æ–ª–æ–≤.")
            return

        accounts = load_accounts()
        if accounts:
            hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
            accounts[0]["password"] = hashed_password.decode('utf-8')
            save_accounts(accounts)
            self.error_label.setText("–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.")
            self.accept()

        else:
            self.error_label.setText("–ê–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# SkinSettingsDialog —É–¥–∞–ª–µ–Ω - —Å–∫–∏–Ω—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è

def get_saved_skin_is_slim():
    try: 
        settings_path = os.path.join(LAUNCHER_FILES_DIR, 'skin_settings.json')
        if os.path.exists(settings_path):
            with open(settings_path, 'r') as f:
                settings = json.load(f)
                return settings.get('skin_type') == 'slim'
    except Exception:
        pass
    return False

# –§—É–Ω–∫—Ü–∏–∏ —Å–∫–∏–Ω–æ–≤ —É–¥–∞–ª–µ–Ω—ã

def get_pack_format(version_parts):
    if version_parts[0] == 1:
        if version_parts[1] >= 21: return 48
        if version_parts[1] >= 20: return 34
        if version_parts[1] >= 19: return 12
        if version_parts[1] >= 18: return 9
        if version_parts[1] >= 17: return 8
        if version_parts[1] >= 16: return 7
        if version_parts[1] >= 15: return 6
        if version_parts[1] >= 13: return 4
        if version_parts[1] >= 11: return 3
        if version_parts[1] >= 9:  return 2
        if version_parts[1] >= 6:  return 1
        if version_parts[1] >= 5:  return 1
    return 0

def generate_offline_uuid(username, slim=False):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –æ—Ñ—Ñ–ª–∞–π–Ω-UUID —Ç–∏–ø–∞ 3 –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏. –î–ª—è slim –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–π namespace,
    —á—Ç–æ–±—ã —Å—Ç–∞–±–∏–ª—å–Ω–æ –ø–æ–ª—É—á–∞—Ç—å UUID —Å –Ω—É–∂–Ω—ã–º bit-–º–∞—Å–∫–æ–º slim/wide –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–ª–∏–µ–Ω—Ç–∞—Ö."""
    try:
        name = f"OfflinePlayer:{username}" if not slim else f"OfflinePlayerSlim:{username}"
        md5 = hashlib.md5(name.encode('utf-8')).hexdigest()
        # –§–æ—Ä–º–∏—Ä—É–µ–º UUID –≤–µ—Ä—Å–∏–∏ 3
        md5_bytes = bytearray.fromhex(md5)
        md5_bytes[6] = (md5_bytes[6] & 0x0F) | 0x30  # –≤–µ—Ä—Å–∏—è 3
        md5_bytes[8] = (md5_bytes[8] & 0x3F) | 0x80  # RFC 4122 variant
        return str(_uuid.UUID(bytes=bytes(md5_bytes)))
    except Exception:
        return str(uuid1())

def get_saved_skin_is_slim():
    try:
        settings_path = os.path.join(LAUNCHER_FILES_DIR, 'skin_settings.json')
        if os.path.exists(settings_path):
            with open(settings_path, 'r') as f:
                settings = json.load(f)
                return settings.get('skin_type') == 'slim'
    except Exception:
        pass
    return False

class LaunchThread(QtCore.QThread):
    launch_setup_signal = QtCore.pyqtSignal(str, str)  # Changed from 3 to 2 arguments
    progress_update_signal = QtCore.pyqtSignal(int, int, str)
    state_update_signal = QtCore.pyqtSignal(bool)
    game_started_signal = QtCore.pyqtSignal()

    def __init__(self):
        super().__init__()
        self.version_id = ''
        self.username = ''
        self.progress = 0
        self.progress_max = 0
        self.progress_label = ''
        self.running = True

    def launch_setup(self, version_id, username):
        self.version_id = version_id
        self.username = username

    def update_progress_label(self, value):
        self.progress_label = value
        self.progress_update_signal.emit(self.progress, self.progress_max, self.progress_label)

    def update_progress(self, value):
        self.progress = value
        self.progress_update_signal.emit(self.progress, self.progress_max, self.progress_label)

    def update_progress_max(self, value):
        self.progress_max = value
        self.progress_update_signal.emit(self.progress, self.progress_max, self.progress_label)

    def run(self):
        self.running = True
        if is_version_in_mojang_manifest(self.version_id):
            if not download_minecraft_version(self.version_id, minecraft_directory):
                return
        else:
            local_profile = fetch_local_version_data(self.version_id)
            if not local_profile:
                logging.error(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤–µ—Ä—Å–∏–∏ {self.version_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            base_version = local_profile.get('inheritsFrom')
            if base_version:
                download_minecraft_version(base_version, minecraft_directory)
        launch_minecraft(self.version_id, self.username, minecraft_directory)
        self.game_started_signal.emit()
        self.running = False

"""
–£–¥–∞–ª–µ–Ω—ã –∫–ª–∞—Å—Å—ã DevConsoleWindow/QtLogHandler –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""

class VersionListItem(QtWidgets.QPushButton):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –≤–µ—Ä—Å–∏–π"""
    selected = pyqtSignal(str, str)  # display_text, version_data
    
    def __init__(self, display_text, version_data, item_type="version"):
        super().__init__()
        self.display_text = display_text
        self.version_data = version_data
        self.item_type = item_type
        self.is_selected = False
        
        self.setText(display_text)
        self.setMinimumHeight(25)
        self.setMaximumHeight(25)
        
        self.update_style()
        self.clicked.connect(self.on_clicked)
    
    def update_style(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å —ç–ª–µ–º–µ–Ω—Ç–∞"""
        if self.is_selected:
            background = "#61afef"
            text_color = "#ffffff"
        else:
            background = "#44475a"
            text_color = "#ffffff"
        
        self.setStyleSheet(f"""
            QPushButton {{
                background-color: {background};
                color: {text_color};
                border: none;
                border-radius: 2px;
                padding: 3px 8px;
                font-size: 11px;
                text-align: left;
            }}
            QPushButton:hover {{
                background-color: #61afef;
                color: #ffffff;
            }}
        """)
    
    def set_selected(self, selected):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—ã–±–æ—Ä–∞"""
        self.is_selected = selected
        self.update_style()
    
    def on_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞"""
        self.selected.emit(self.display_text, self.version_data)


class AnimatedVersionList(QtWidgets.QWidget):
    """–ü—Ä–æ—Å—Ç–æ–π –∫–∞—Å—Ç–æ–º–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π"""
    version_selected = pyqtSignal(str, str)  # display_text, version_data
    
    def __init__(self):
        super().__init__()
        self.selected_item = None
        self.items = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(5)
        
        # –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–æ–ª–ª —Å–ø–∏—Å–æ–∫
        self.scroll_area = QScrollArea()
        self.scroll_area.setWidgetResizable(True)
        self.scroll_area.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scroll_area.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.scroll_area.setFrameShape(QFrame.NoFrame)
        self.scroll_area.setStyleSheet("""
            QScrollArea {
                background-color: #44475a;
                border: 1px solid #6272a4;
                border-radius: 4px;
            }
        """)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
        self.list_widget = QtWidgets.QWidget()
        self.list_layout = QtWidgets.QVBoxLayout(self.list_widget)
        self.list_layout.setContentsMargins(2, 2, 2, 2)
        self.list_layout.setSpacing(1)
        
        self.scroll_area.setWidget(self.list_widget)
        layout.addWidget(self.scroll_area)
    
    def add_version(self, display_text, version_data, item_type="version"):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ —Å–ø–∏—Å–æ–∫"""
        item = VersionListItem(display_text, version_data, item_type)
        item.selected.connect(self.on_item_selected)
        
        self.items.append(item)
        self.list_layout.addWidget(item)
    
    def clear_versions(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π"""
        for item in self.items:
            item.deleteLater()
        self.items.clear()
        self.selected_item = None
    
    def on_item_selected(self, display_text, version_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞"""
        # –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        if self.selected_item:
            self.selected_item.set_selected(False)
        
        # –ù–∞—Ö–æ–¥–∏–º –∏ –≤—ã–¥–µ–ª—è–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç
        sender = self.sender()
        if isinstance(sender, VersionListItem):
            sender.set_selected(True)
            self.selected_item = sender
        
        # –≠–º–∏—Ç–∏–º —Å–∏–≥–Ω–∞–ª –æ –≤—ã–±–æ—Ä–µ
        self.version_selected.emit(display_text, version_data)
    
    def get_selected_version(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é"""
        if self.selected_item:
            return self.selected_item.display_text, self.selected_item.version_data
        return None, None


class SettingsDialog(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setFixedSize(400, 300)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")

        self.layout = QtWidgets.QVBoxLayout(self)
        self.layout.setContentsMargins(20, 20, 20, 20)

        # Add Launcher icon
        self.launcher_icon_label = QtWidgets.QLabel()
        icon = QIcon(os.path.join(IMAGES_DIR, "–ê–≤–∞—Ç–∞—Ä–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞.png"))
        self.launcher_icon_label.setPixmap(icon.pixmap(25, 25))
        self.launcher_icon_label.setAlignment(QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop)
        self.layout.addWidget(self.launcher_icon_label)

        self.central_widget = QtWidgets.QWidget()
        self.central_layout = QtWidgets.QVBoxLayout(self.central_widget)
        self.central_layout.setAlignment(QtCore.Qt.AlignCenter)

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π (–∫–æ–º–ø–∞–∫—Ç–Ω—ã–π)
        self.version_list = AnimatedVersionList()
        self.version_list.setMaximumHeight(120)  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É
        self.version_list.setMinimumWidth(150)  # –î–µ–ª–∞–µ–º —Å–ø–∏—Å–æ–∫ —à–∏—Ä–µ
        self.version_list.version_selected.connect(self.on_version_selected)
        self.central_layout.addWidget(self.version_list, alignment=QtCore.Qt.AlignCenter)

        self.filter_button = QtWidgets.QPushButton("–§–∏–ª—å—Ç—Ä", self)
        self.filter_button.setStyleSheet("""
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 10px;
                min-width: 100px;
                max-width: 100px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """)
        self.central_layout.addWidget(self.filter_button, alignment=QtCore.Qt.AlignCenter)

        self.layout.addStretch()
        self.layout.insertWidget(1, self.central_widget, alignment=QtCore.Qt.AlignCenter)
        self.layout.setStretchFactor(self.launcher_icon_label, 0)
        self.layout.setStretchFactor(self.central_widget, 2)
        self.layout.insertStretch(2)

        self.launch_button = QtWidgets.QPushButton("–ó–∞–ø—É—Å—Ç–∏—Ç—å")
        self.cancel_button = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")

        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.launch_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)

        self.launch_button.setMinimumWidth(120)
        self.launch_button.setMinimumHeight(30)
        self.cancel_button.setMinimumWidth(80)
        self.cancel_button.setMinimumHeight(25)

        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addStretch()
        button_layout.addWidget(self.cancel_button)

        main_bottom_layout = QtWidgets.QVBoxLayout()
        main_bottom_layout.addStretch()
        main_bottom_layout.addWidget(self.launch_button, alignment=QtCore.Qt.AlignCenter)
        main_bottom_layout.addLayout(button_layout)

        self.layout.addLayout(main_bottom_layout)

        self.launch_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        self.filter_button.clicked.connect(self.toggle_version_list)

        self.load_settings()  # Call this method before using self.settings

        self.is_filtering = False
        self.show_snapshots = self.settings.get('show_snapshots', False)
        self.show_fabric = self.settings.get('show_fabric', False)
        self.selected_version_data = None

        self.layout.addStretch()
        self.layout.setStretchFactor(main_bottom_layout, 1)

        self.minecraft_directory = get_minecraft_directory()
        self.update_version_list()
    
    def on_version_selected(self, display_text, version_data):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤–µ—Ä—Å–∏–∏"""
        self.selected_version_data = version_data
        self.launch_button.setEnabled(True)
        logging.info(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è: {display_text} (ID: {version_data})")
    
    def get_selected_version_data(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"""
        return self.selected_version_data

    def update_version_list(self):
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ø–∏—Å–æ–∫
        self.version_list.clear_versions()
        
        # –°–Ω–∞—á–∞–ª–∞ –ª–æ–∫–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ (–≤–∫–ª—é—á–∞—è —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ Fabric)
        for v in sorted(list_local_versions()):
            # –°–∫—Ä—ã–≤–∞–µ–º Fabric-–ø—Ä–æ—Ñ–∏–ª–∏, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞
            if (not self.show_fabric) and (v.startswith('fabric-') or 'fabric-loader-' in v):
                continue
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π ID –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ
            display_name = format_fabric_display_name(v)
            item_type = "fabric" if v.startswith('fabric-') or 'fabric-loader-' in v else "version"
            self.version_list.add_version(display_name, v, item_type)
            
        # –ó–∞—Ç–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏
        manifest = fetch_mojang_manifest()
        if manifest:
            versions = manifest['versions']
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–æ N, —á—Ç–æ–±—ã UI –Ω–µ —Ç–æ—Ä–º–æ–∑–∏–ª
            MAX_LISTED = 200
            count = 0
            added_versions = set([v for v in list_local_versions()])
            
            for version in versions:
                if (not self.is_filtering or self.is_version_installed(version['id'])) and \
                   (self.show_snapshots or version['type'] != 'snapshot'):
                    # –ò–∑–±–µ–≥–∞–µ–º –¥—É–±–ª–µ–π
                    if version['id'] not in added_versions:
                        self.version_list.add_version(version['id'], version['id'], "version")
                        added_versions.add(version['id'])
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É–Ω–∫—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Fabric —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ —Ñ–∏–ª—å—Ç—Ä –≤—ã–∫–ª—é—á–µ–Ω
                        if self.show_fabric and not self.is_filtering:
                            fabric_display = f"{version['id']} (Fabric)"
                            fabric_data = f"install_fabric_{version['id']}"
                            self.version_list.add_version(fabric_display, fabric_data, "fabric_install")
                        count += 1
                        if count >= MAX_LISTED:
                            break

    def toggle_version_list(self):
        self.is_filtering = not self.is_filtering
        if self.is_filtering:
            self.filter_button.setText("–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–µ—Ä—Å–∏–∏")
        else:
            self.filter_button.setText("–§–∏–ª—å—Ç—Ä")
        self.update_version_list()

    def is_version_installed(self, version_id):
        version_path = os.path.join(self.minecraft_directory, 'versions', version_id, f'{version_id}.jar')
        if os.path.exists(version_path):
            return True
        # –î–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω—ã—Ö (Fabric) —Å—á–∏—Ç–∞–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ profile JSON
        json_path = os.path.join(self.minecraft_directory, 'versions', version_id, f'{version_id}.json')
        return os.path.exists(json_path)


    def load_settings(self):
        self.settings_path = os.path.join(LAUNCHER_FILES_DIR, "launcher_settings.json")
        try:
            with open(self.settings_path, 'r') as f:
                self.settings = json.load(f)
        except:
            self.settings = {'ram': 2, 'show_snapshots': False, 'show_fabric': False}

    def save_settings(self):
        self.settings['ram'] = self.ram_spin.value()
        self.settings['show_snapshots'] = self.snapshots_checkbox.isChecked()
        with open(self.settings_path, 'w') as f:
            json.dump(self.settings, f)
        self.accept()

    def open_console(self):
        QMessageBox.information(self, "–ö–æ–Ω—Å–æ–ª—å", "–ö–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

# ---- –°–∏—Å—Ç–µ–º–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ----

class NotificationWidget(QtWidgets.QWidget):
    """–í–∏–¥–∂–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –ø–ª–∞–≤–Ω—ã–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥"""
    
    def __init__(self, parent=None, message="", duration=10000):
        super().__init__(parent)
        self.duration = duration
        self.setupUi(message)
        self.setupAnimation()
        
    def setupUi(self, message):
        self.setFixedSize(350, 80)
        self.setStyleSheet("""
            QWidget {
                background-color: rgba(44, 47, 51, 230);
                border: 2px solid #61afef;
                border-radius: 8px;
                color: #ffffff;
                font-size: 12px;
            }
        """)
        
        # Layout
        layout = QtWidgets.QVBoxLayout(self)
        layout.setContentsMargins(15, 10, 15, 10)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QtWidgets.QLabel("üéÆ –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è!")
        title_label.setStyleSheet("font-weight: bold; font-size: 14px; color: #61afef;")
        layout.addWidget(title_label)
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ
        message_label = QtWidgets.QLabel(message)
        message_label.setWordWrap(True)
        message_label.setStyleSheet("color: #ffffff; font-size: 12px;")
        layout.addWidget(message_label)
        
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_btn = QtWidgets.QPushButton("‚úï")
        self.close_btn.setFixedSize(20, 20)
        self.close_btn.setStyleSheet("""
            QPushButton {
                background-color: transparent;
                border: none;
                color: #ffffff;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: rgba(255, 0, 0, 100);
                border-radius: 10px;
            }
        """)
        self.close_btn.clicked.connect(self.hide_notification)
        
        # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
        self.close_btn.setParent(self)
        self.close_btn.move(self.width() - 25, 5)
        
    def setupAnimation(self):
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        self.fade_in_effect = QtWidgets.QGraphicsOpacityEffect()
        self.setGraphicsEffect(self.fade_in_effect)
        
        self.fade_in_animation = QtCore.QPropertyAnimation(self.fade_in_effect, b"opacity")
        self.fade_in_animation.setDuration(500)
        self.fade_in_animation.setStartValue(0)
        self.fade_in_animation.setEndValue(1)
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏—è
        self.fade_out_animation = QtCore.QPropertyAnimation(self.fade_in_effect, b"opacity")
        self.fade_out_animation.setDuration(2000)  # 2 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ
        self.fade_out_animation.setStartValue(1)
        self.fade_out_animation.setEndValue(0)
        self.fade_out_animation.finished.connect(self.deleteLater)
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è
        self.hide_timer = QtCore.QTimer()
        self.hide_timer.timeout.connect(self.hide_notification)
        self.hide_timer.setSingleShot(True)
        
    def show_notification(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π"""
        self.show()
        self.raise_()
        self.fade_in_animation.start()
        self.hide_timer.start(self.duration)
        
    def hide_notification(self):
        """–°–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å –ø–ª–∞–≤–Ω—ã–º –∏—Å—á–µ–∑–Ω–æ–≤–µ–Ω–∏–µ–º"""
        self.hide_timer.stop()
        self.fade_out_animation.start()


class FriendNotificationManager(QtCore.QObject):
    """–ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –≤ –¥—Ä—É–∑—å—è"""
    
    friend_request_received = QtCore.pyqtSignal(str, str)  # sender_name, message
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.parent_widget = parent
        self.check_timer = QtCore.QTimer()
        self.check_timer.timeout.connect(self.check_friend_requests)
        self.last_request_count = 0
        
    def start_checking(self, interval=5000):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        """–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è"""
        self.check_timer.start(interval)
        
    def stop_checking(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É"""
        self.check_timer.stop()
        
    def check_friend_requests(self):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è —á–µ—Ä–µ–∑ API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            accounts = load_accounts()
            if not accounts or not accounts[0].get('accessToken'):
                return
                
            # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            session = requests.Session()
            headers = get_auth_headers()
            response = session.get(f"{BACKEND_BASE_URL}/api/friends/pending-notifications", headers=headers, timeout=5)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    pending_count = data.get('pending_count', 0)
                    latest_sender = data.get('latest_sender')
                    
                    # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    if pending_count > self.last_request_count and latest_sender:
                        message = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {latest_sender} —Ö–æ—á–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –≤–∞—Å –≤ –¥—Ä—É–∑—å—è!"
                        self.show_notification(latest_sender, message)
                        
                    self.last_request_count = pending_count
            elif response.status_code == 401:
                # –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã
                self.stop_checking()
                    
        except Exception as e:
            pass  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—Ä—É–∑–µ–π
            
    def show_notification(self, sender_name, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ –≤ –¥—Ä—É–∑—å—è"""
        if self.parent_widget:
            notification = NotificationWidget(self.parent_widget, message)
            
            # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
            parent_rect = self.parent_widget.geometry()
            notification.move(
                parent_rect.width() - notification.width() - 20,
                20
            )
            
            notification.show_notification()
            self.friend_request_received.emit(sender_name, message)


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        self.MainWindow = MainWindow
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(720, 480)
        MainWindow.setFixedSize(720, 480)
        MainWindow.setWindowFlags(QtCore.Qt.FramelessWindowHint)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É CSS —Å –ø–æ–º–æ—â—å—é Python
        css_string = f"""
        QMainWindow {{
            background-color: #333333;
            background-image: url('{os.path.join(IMAGES_DIR, '–≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞.png').replace('\\', '/')}');
            background-repeat: no-repeat;
            background-position: center;
        }}
        """

        # –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –∫ –≥–ª–∞–≤–Ω–æ–º—É –æ–∫–Ω—É
        MainWindow.setStyleSheet(css_string)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self.m_flag = False
        self.m_Position = None
        self.set_mouse_events(MainWindow)

        # –£–¥–∞–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –æ–∫–Ω–∞ –∫–æ–Ω—Å–æ–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

        # –ö–Ω–æ–ø–∫—É –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ–Ω—Å–æ–ª–∏ —É–¥–∞–ª–∏–ª–∏ –ø–æ –ø–æ–∂–µ–ª–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞
        # –†–∞–∑–º–µ—Ä –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –∏ –æ–≤–∞–ª; –ø–æ–∑–∏—Ü–∏—è –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É —Å –æ—Ç—Å—Ç—É–ø–æ–º 5px
        play_icon_path = os.path.join(IMAGES_DIR, "Play.png")
        play_pix = QtGui.QPixmap(play_icon_path)
        if not play_pix.isNull():
            button_width = play_pix.width()
            button_height = play_pix.height()
        else:
            button_width = 160
            button_height = 80
        x = 720 - 10 - button_width
        y = 480 - 10 - button_height
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(x, y, button_width, button_height)  # x, y, width, height
        self.pushButton.setStyleSheet("""
            QPushButton {
                background-color:rgba(97, 175, 239, 0);
                color: #ffffff;
                border: none;
                border-radius: 999px;
                padding: 10px 20px;
                font-size: 16px;
            }
            QPushButton:hover {
                background-color:rgba(80, 138, 204, 0);
            }
        """)
        icon = QtGui.QIcon(play_pix if not play_pix.isNull() else os.path.join(IMAGES_DIR, "Play.png"))
        
        # –ö–Ω–æ–ø–∫–∞ –≤—ã—Ö–æ–¥–∞ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
        self.pushButton.setIcon(icon)
        self.pushButton.setIconSize(QtCore.QSize(button_width, button_height))
        self.pushButton.setFixedSize(button_width, button_height)
        self.pushButton.setText("")  # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        self.close_button = QtWidgets.QPushButton(self.centralwidget)
        # –°–¥–≤–∏–≥–∞–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∞–≤–µ–µ –Ω–∞ 5px (–æ—Ç—Å—Ç—É–ø —Ç–µ–ø–µ—Ä—å ~5px)
        self.close_button.setGeometry(720 - 25 - 5, 3, 25, 25)  # x, y, width, height
        self.close_button.setStyleSheet("""
            QPushButton {
                background-color:rgba(68, 71, 90, 0);
                color: #ffffff;
                border: none;
                border-radius: 4px;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color:rgb(250, 44, 61);
            }
        """)
        icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        self.close_button.setIcon(icon)
        self.close_button.setIconSize(QtCore.QSize(25, 25))  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        self.close_button.setFixedSize(25, 25)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
        self.circular_button = QtWidgets.QPushButton(self.centralwidget)
        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è: –ø–æ–¥–Ω—è—Ç—å –µ—â—ë –≤—ã—à–µ –Ω–∞ 10px
        self.circular_button.setGeometry(15, 150, 36, 36)  # x, y, width, height
        self.circular_button.setStyleSheet("""
            QPushButton {
                border: none;
                border-radius: 18px;
                background-color: #333333;
            }
            QPushButton:hover {
                background-color: #61afef;
            }
        """)
        icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "–ê–≤–∞—Ç–∞—Ä–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞.png"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        self.circular_button.setIcon(icon)
        self.circular_button.setIconSize(QtCore.QSize(22, 22))  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        self.circular_button.setFixedSize(36, 36)

        # –ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é —É–¥–∞–ª—ë–Ω

        # –ö–Ω–æ–ø–∫–∞ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞
        self.minimize_button = QtWidgets.QPushButton(self.centralwidget)
        # –†–∞–∑–º–µ—â–∞–µ–º –≤–ø–ª–æ—Ç–Ω—É—é –∫ –∫–Ω–æ–ø–∫–µ –∑–∞–∫—Ä—ã—Ç–∏—è (–±–µ–∑ –∑–∞–∑–æ—Ä–∞)
        self.minimize_button.setGeometry((720 - 25 - 5) - 25, 3, 25, 25)
        self.minimize_button.setStyleSheet("""
            QPushButton {
                background-color:rgba(105, 105, 105, 0);
                color: #ffffff;
                border: none;
                border-radius: 4px;
                font-size: 10px;
            }
            QPushButton:hover {
                background-color:rgb(0, 247, 255);
            }
        """)
        icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "–°urtail.png"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
        self.minimize_button.setIcon(icon)
        self.minimize_button.setIconSize(QtCore.QSize(25, 25))  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        self.minimize_button.setFixedSize(25, 25)
        self.minimize_button.clicked.connect(MainWindow.showMinimized)  # –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—é

        # –ö—Ä—É–≥–ª–∞—è –∫–Ω–æ–ø–∫–∞ –î—Ä—É–∑—å—è (–¥–ª—è –±—É–¥—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π) ‚Äî –ø–æ–¥ –∫–Ω–æ–ø–∫–æ–π —Å–≤–æ—Ä–∞—á–∏–≤–∞–Ω–∏—è
        self.friends_button = QtWidgets.QPushButton(self.centralwidget)
        # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ minimize –∏ –¥–µ–ª–∞–µ–º –±–æ–ª—å—à–µ (36x36)
        friends_size = 36
        minimize_x = (720 - 25 - 5) - 25
        minimize_y = 3
        minimize_w = 25
        minimize_h = 25
        friends_x = (minimize_x + minimize_w) - friends_size
        friends_y = minimize_y + minimize_h + 5
        self.friends_button.setGeometry(friends_x, friends_y, friends_size, friends_size)
        self.friends_button.setStyleSheet("""
            QPushButton {
                background-color: #2b2b2b;
                color: #ffffff;
                border: none;
                border-radius: 18px;
            }
            QPushButton:hover {
                background-color: #444444;
            }
        """)
        self.friends_button.setText("")
        self.friends_button.setFixedSize(friends_size, friends_size)
        self.friends_button.clicked.connect(self.on_friends_button_clicked)
        # –ò–∫–æ–Ω–∫–∞ Friends.png –Ω–∞ –∫–Ω–æ–ø–∫–µ
        try:
            friends_icon_path = os.path.join(IMAGES_DIR, "Friends.png")
            if os.path.exists(friends_icon_path):
                friends_icon = QtGui.QIcon(friends_icon_path)
                self.friends_button.setIcon(friends_icon)
                self.friends_button.setIconSize(QtCore.QSize(24, 24))
                self.friends_button.setToolTip("–î—Ä—É–∑—å—è")
        except Exception:
            pass

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏ Minecraft (–∏–∑–º–µ–Ω–µ–Ω–∞)
        folder_button_size = 36
        self.open_folder_button = QtWidgets.QPushButton(self.centralwidget)
        # –ö–Ω–æ–ø–∫—É –ø–∞–ø–∫–∏ –æ–ø—É—Å—Ç–∏—Ç—å –µ—â—ë –Ω–∞ 10px
        self.open_folder_button.setGeometry(15, 300, folder_button_size, folder_button_size)
        self.open_folder_button.setStyleSheet("""
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 18px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """)
        icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Folder.png"))
        self.open_folder_button.setIcon(icon)
        self.open_folder_button.setIconSize(QtCore.QSize(folder_button_size, folder_button_size))
        self.open_folder_button.setFixedSize(folder_button_size, folder_button_size)
        self.open_folder_button.clicked.connect(self.open_minecraft_folder)

        # –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ª–∞—É–Ω—á–µ—Ä–∞
        self.settings_button = QtWidgets.QPushButton(self.centralwidget)
        # –ö–Ω–æ–ø–∫—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–ø—É—Å—Ç–∏—Ç—å, —Å–æ—Ö—Ä–∞–Ω—è—è 5px –æ—Ç –ø–∞–ø–∫–∏ (–ø–∞–ø–∫–∞ 300 => 300-36-5=259)
        self.settings_button.setGeometry(15, 259, folder_button_size, folder_button_size)
        self.settings_button.setStyleSheet("""
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 18px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """)
        icon_settings = QtGui.QIcon(os.path.join(IMAGES_DIR, "Settings.png"))  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        self.settings_button.setIcon(icon_settings)
        self.settings_button.setIconSize(QtCore.QSize(folder_button_size, folder_button_size))
        self.settings_button.setFixedSize(folder_button_size, folder_button_size)
        self.settings_button.clicked.connect(self.open_settings)

        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.launch_game)
        self.close_button.clicked.connect(MainWindow.close)
        self.circular_button.clicked.connect(self.on_circular_button_clicked)


        self.launch_threads = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤ –∑–∞–ø—É—Å–∫–∞
        self.version_id = None

        # Store a reference to the main window
        self.main_window = MainWindow

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ç—Ä–∏–±—É—Ç–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞
        self.last_login_time = 0

        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫–∫–∞—É–Ω—Ç—ã
        accounts = load_accounts()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        if not accounts or not accounts[0].get('accessToken'):
            self.show_login_dialog()
        else:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
            if accounts:
                username = accounts[0]["username"]
                self.pushButton.show()
                # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–º–µ–Ω—è–µ–º —Å–∫–∏–Ω –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
                self.apply_auto_skin(username)
            else:
                self.pushButton.hide()

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª–æ—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ launch_threads
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # –ü—Ä–∏–º–µ–Ω–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä
        try:
            self.apply_profile_avatar_icon()
        except Exception:
            pass

        # –ü–∞–Ω–µ–ª—å –¥—Ä—É–∑–µ–π –∏ —á–∞—Ç–∞ (—Å–∫—Ä—ã—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        self.create_friends_chat_panel()
        self.friends_panel.setVisible(False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–ø—Ä–æ—Å–∞—Ö –≤ –¥—Ä—É–∑—å—è
        self.notification_manager = FriendNotificationManager(MainWindow)
        self.notification_manager.friend_request_received.connect(self.on_friend_request_received)
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω —Å backend –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
        try:
            import threading
            def sync_token_async():
                result = sync_token_with_backend()
                if result == "reauth_required":
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
                    QtCore.QMetaObject.invokeMethod(
                        self, "show_reauth_dialog", 
                        QtCore.Qt.QueuedConnection
                    )
            threading.Thread(target=sync_token_async, daemon=True).start()
        except Exception:
            pass
        
        self.notification_manager.start_checking()

        # --- –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞ ---
        self.chat_refresh_timer = QtCore.QTimer()
        self.chat_refresh_timer.setInterval(2500)  # 2.5 —Å–µ–∫—É–Ω–¥—ã
        self.chat_refresh_timer.timeout.connect(self._auto_refresh_chat)

    def _auto_refresh_chat(self):
        # –û–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∞–Ω–µ–ª—å –¥—Ä—É–∑–µ–π –æ—Ç–∫—Ä—ã—Ç–∞ –∏ –≤—ã–±—Ä–∞–Ω —á–∞—Ç
        if hasattr(self, 'friends_panel') and self.friends_panel.isVisible():
            if hasattr(self, 'current_chat_uuid') and self.current_chat_uuid:
                # –ù–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –µ—Å–ª–∏ –¥–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ –æ—Ç–∫—Ä—ã—Ç (—á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞—Ç—å)
                self.load_chat_history(self.current_chat_uuid)

    @QtCore.pyqtSlot()
    def show_reauth_dialog(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ —É—Å—Ç–∞—Ä–µ–≤—à–µ–º —Ç–æ–∫–µ–Ω–µ"""
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Warning)
        msg.setWindowTitle("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
        msg.setText("–í–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞—Ö–æ–¥–∞ –Ω–∞ —Å–∞–π—Ç–µ.\n\n–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥—Ä—É–∑–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
        msg.addButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", QtWidgets.QMessageBox.AcceptRole)
        msg.addButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", QtWidgets.QMessageBox.RejectRole)
        
        result = msg.exec_()
        if result == 0:  # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
            clear_saved_accounts()
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
            self.notification_manager.stop_checking()
            self.show_login_dialog()

    def logout_account(self):
        """–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞"""
        msg = QtWidgets.QMessageBox()
        msg.setIcon(QtWidgets.QMessageBox.Question)
        msg.setWindowTitle("–í—ã—Ö–æ–¥ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞")
        msg.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞?\n\n–≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –¥—Ä—É–∑–µ–π.")
        msg.addButton("–í—ã–π—Ç–∏", QtWidgets.QMessageBox.AcceptRole)
        msg.addButton("–û—Ç–º–µ–Ω–∞", QtWidgets.QMessageBox.RejectRole)
        
        result = msg.exec_()
        if result == 0:  # –í—ã–π—Ç–∏
            clear_saved_accounts()
            self.pushButton.hide()
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            self.notification_manager.stop_checking()
            # –°—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
            self.show_login_dialog()

    def show_login_dialog(self):
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –±–µ–∑ UI: device-flow —á–µ—Ä–µ–∑ —Å–∞–π—Ç
        accs = load_accounts()
        if accs and accs[0].get('accessToken'):
            return
        try:
            r = requests.post(BACKEND_BASE_URL + '/api/device/start', timeout=10)
            d = r.json()
            verify_url = d.get('verification_uri')
            device_code = d.get('device_code')
            if not verify_url or not device_code:
                logging.error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
                return
            import webbrowser
            webbrowser.open(verify_url)
            for _ in range(200):  # ~10 –º–∏–Ω—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è
                time.sleep(3)
                pr = requests.post(BACKEND_BASE_URL + '/api/device/poll', json={'device_code': device_code}, timeout=10)
                if pr.status_code == 202:
                    continue
                if not pr.ok:
                    logging.error('–û—à–∏–±–∫–∞ device/poll')
                    return
                pd = pr.json()
                if pd.get('ok'):
                    _save_authenticated_account(pd['username'], pd['accessToken'], pd['clientToken'], pd['uuid'])
                    self.last_login_time = time.time()
                    # –ü—Ä–∏–º–µ–Ω–∏–º —Å–∫–∏–Ω –∏ –ø–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏
                    try:
                        self.pushButton.show()
                        self.apply_auto_skin(pd['username'])
                        # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                        self.notification_manager.start_checking()
                    except Exception:
                        pass
                    return
                else:
                    logging.error(pd.get('message', '–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è'))
                    return
            logging.error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞')
        except Exception as e:
            logging.error(f'–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ —Å–∞–π—Ç: {e}')
        else:
            self.pushButton.hide()
            # –ï—Å–ª–∏ –≤—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, —Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        print("–í—Ö–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è. –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
        sys.exit(1) # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton.setText(_translate("MainWindow", ""))

    def state_update(self, value):
        # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ë–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º state_update –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∫–Ω–æ–ø–∫–∏.
        #  –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—ã–ª–∞ –ø—Ä–∏—á–∏–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ UI.
        print("–ó–∞–ø—É—Å–∫!")

    def update_progress(self, progress, maxprogress, label):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"""
        print(f"[–ü—Ä–æ–≥—Ä–µ—Å—Å] {label}: {progress}/{maxprogress}")

    def game_started(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã"""
        # Remove the QMessageBox that shows the "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫" message
        # QtWidgets.QMessageBox.information(
        #     self.MainWindow,
        #     "–£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—É—Å–∫",
        #     "–ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞!"
        # )

    def on_circular_button_clicked(self):
        self.profile_dialog = ProfileDialog(self.MainWindow, self)  # Pass both MainWindow and Ui_MainWindow
        self.profile_dialog.exec_()

    def on_friends_button_clicked(self):
        try:
            is_visible = self.friends_panel.isVisible()
            self.friends_panel.setVisible(not is_visible)
            if not is_visible:
                self.friends_panel.raise_()
                self.friends_panel.activateWindow()
                # –ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
                self.chat_refresh_timer.start()
            else:
                self.chat_refresh_timer.stop()
        except Exception:
            pass

    def apply_profile_avatar_icon(self):
        # –°—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∞–≤–∞—Ç–∞—Ä –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∫ –∫–Ω–æ–ø–∫–µ –ø—Ä–æ—Ñ–∏–ª—è
        try:
            if os.path.exists(PROFILE_SETTINGS_FILE):
                with open(PROFILE_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                    st = json.load(f)
                path = st.get('profile_avatar_path')
                if path and os.path.exists(path):
                    icon = QtGui.QIcon(path)
                    self.circular_button.setIcon(icon)
                    # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–∫–∏
                    self.circular_button.setIconSize(QtCore.QSize(self.circular_button.width()-4, self.circular_button.height()-4))
        except Exception:
            pass

    def open_settings(self):
        # –û—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞—É–Ω—á–µ—Ä–∞
        settings_dialog = LauncherSettingsDialog()
        settings_dialog.exec_()

    def launch_game(self):
        """–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã —Å –Ω–æ–≤—ã–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º"""
        settings_dialog = SettingsDialog()
        if settings_dialog.exec_() == QtWidgets.QDialog.Accepted:
            # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏–∑ –Ω–æ–≤–æ–≥–æ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            selected_data = settings_dialog.get_selected_version_data()
            
            if not selected_data:
                QtWidgets.QMessageBox.warning(
                    self.MainWindow, 
                    "–û—à–∏–±–∫–∞", 
                    "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞!"
                )
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ ID –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ Fabric
            if selected_data.startswith("install_fabric_"):
                base_v = selected_data.replace("install_fabric_", "")
                logging.info(f"üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Fabric –¥–ª—è –≤–µ—Ä—Å–∏–∏ {base_v}...")
                fabric_id = install_fabric_version(base_v, minecraft_directory)
                if not fabric_id:
                    QtWidgets.QMessageBox.warning(
                        self.MainWindow, 
                        "–û—à–∏–±–∫–∞", 
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Fabric –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏"
                    )
                    return
                self.version_id = fabric_id
                logging.info(f"‚úÖ Fabric —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {fabric_id}")
            else:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π ID –≤–µ—Ä—Å–∏–∏
                self.version_id = selected_data
                logging.info(f"üéÆ –í—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞: {self.version_id}")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∏–∫ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π
            accounts = load_accounts()
            if accounts:
                username = accounts[0]["username"]
            else:
                username = generate_username()[0]

            # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –∑–∞–ø—É—Å–∫–∞
            launch_thread = LaunchThread()
            launch_thread.launch_setup_signal.connect(launch_thread.launch_setup)
            launch_thread.progress_update_signal.connect(self.update_progress)
            launch_thread.game_started_signal.connect(self.game_started)
            launch_thread.finished.connect(partial(self.remove_thread, launch_thread))

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
            self.launch_threads.append(launch_thread)
            launch_thread.start()
            launch_thread.launch_setup_signal.emit(
                self.version_id, 
                username
            )

    def start_game_execution(self):
        """–ü–æ–ª–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—É—Å–∫–∞"""
        if not self.version_id:
            QtWidgets.QMessageBox.warning(
                self.MainWindow,
                "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞",
                "–ù–µ –≤—ã–±—Ä–∞–Ω–∞ –≤–µ—Ä—Å–∏—è!"
            )
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        self.launch_game()

    def remove_thread(self, thread):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Ç–æ–∫–∞"""
        if thread in self.launch_threads:
            self.launch_threads.remove(thread)
            thread.quit()
            thread.wait()

    def apply_auto_skin(self, username):
        """–°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã"""
        pass

    def open_minecraft_folder(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É Minecraft –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ."""
        if not os.path.exists(minecraft_directory):
            QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–ü–∞–ø–∫–∞ Minecraft –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        try:
            if sys.platform == "win32":
                os.startfile(minecraft_directory)
            else:
                webbrowser.open(minecraft_directory)
        except Exception as e:
            QtWidgets.QMessageBox.critical(self.MainWindow, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

    def set_mouse_events(self, MainWindow):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –º—ã—à–∏ –¥–ª—è –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è –æ–∫–Ω–∞."""
        MainWindow.mousePressEvent = self.mousePressEvent
        MainWindow.mouseMoveEvent = self.mouseMoveEvent
        MainWindow.mouseReleaseEvent = self.mouseReleaseEvent

    def mousePressEvent(self, event):
        if event.button() == QtCore.Qt.LeftButton:
            self.m_flag = True
            self.m_Position = event.globalPos() - self.MainWindow.pos()
            event.accept()

    def mouseMoveEvent(self, event):
        if QtCore.Qt.LeftButton and self.m_flag:
            self.MainWindow.move(event.globalPos() - self.m_Position)
            event.accept()

    def mouseReleaseEvent(self, event):
        self.m_flag = False

    # eventFilter —É–¥–∞–ª—ë–Ω: Ui_MainWindow –Ω–µ QObject

    # -------------------- –î–†–£–ó–¨–Ø –ò –ß–ê–¢ --------------------
    def create_friends_chat_panel(self):
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–∞–Ω–µ–ª–∏ –¥—Ä—É–∑–µ–π/—á–∞—Ç–∞ –ø–æ–≤–µ—Ä—Ö centralwidget
        self.friends_panel = QtWidgets.QWidget(self.centralwidget)
        self.friends_panel.setGeometry(0, 0, 720, 480)
        self.friends_panel.setStyleSheet("background-color: rgba(20,20,20,230);")

        root_layout = QtWidgets.QHBoxLayout(self.friends_panel)
        root_layout.setContentsMargins(10, 10, 10, 10)
        root_layout.setSpacing(10)

        # –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –æ–∫–Ω–æ —á–∞—Ç–∞ (—Å–≤–µ—Ä—Ö—É) + –ø–æ–ª–µ –≤–≤–æ–¥–∞ (—Å–Ω–∏–∑—É)
        left_container = QtWidgets.QWidget(self.friends_panel)
        left_layout = QtWidgets.QVBoxLayout(left_container)
        left_layout.setContentsMargins(0, 0, 0, 0)
        left_layout.setSpacing(6)

        # –û–∫–Ω–æ —á–∞—Ç–∞: —Å–æ–æ–±—â–µ–Ω–∏—è –¥—Ä—É–≥–∞ —Å–ª–µ–≤–∞, –º–æ–∏ —Å–ø—Ä–∞–≤–∞
        self.chat_view = QtWidgets.QListWidget(left_container)
        self.chat_view.setStyleSheet("""
            QListWidget { background-color:#2b2b2b; color:#ffffff; border:none; }
        """)
        left_layout.addWidget(self.chat_view, 1)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ + –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        input_row = QtWidgets.QHBoxLayout()
        self.chat_input = QtWidgets.QLineEdit(left_container)
        self.chat_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        self.chat_input.setStyleSheet("background-color:#44475a; color:#fff; border:none; border-radius:4px; padding:6px;")
        self.send_button = QtWidgets.QPushButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", left_container)
        self.send_button.setStyleSheet("""
            QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:hover { background-color:#508acc; }
        """)
        self.send_button.clicked.connect(self.send_chat_message)
        input_row.addWidget(self.chat_input, 1)
        input_row.addWidget(self.send_button)
        left_layout.addLayout(input_row)

        # –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π + –∫–Ω–æ–ø–∫–∏
        right_container = QtWidgets.QWidget(self.friends_panel)
        right_container.setFixedWidth(260)
        right_layout = QtWidgets.QVBoxLayout(right_container)
        right_layout.setContentsMargins(0, 0, 0, 0)
        right_layout.setSpacing(6)

        self.friends_list = QtWidgets.QListWidget(right_container)
        self.friends_list.setStyleSheet("""
            QListWidget { background-color:#2b2b2b; color:#ffffff; border:none; }
        """)
        self.friends_list.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        right_layout.addWidget(self.friends_list, 1)

        # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞
        self.add_friend_button = QtWidgets.QPushButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –¥—Ä—É–∑—å—è", right_container)
        self.add_friend_button.setStyleSheet("""
            QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:hover { background-color:#508acc; }
        """)
        self.add_friend_button.clicked.connect(self.add_friend_dialog)
        right_layout.addWidget(self.add_friend_button)

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        self.back_to_main_button = QtWidgets.QPushButton("–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", right_container)
        self.back_to_main_button.setStyleSheet("""
            QPushButton { background-color:#444444; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:hover { background-color:#5a5a5a; }
        """)
        self.back_to_main_button.clicked.connect(lambda: self.friends_panel.setVisible(False))
        right_layout.addWidget(self.back_to_main_button)

        # –†–∞–∑–º–µ—â–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        root_layout.addWidget(left_container, 1)
        root_layout.addWidget(right_container, 0)

        # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
        self.reload_friends_list()

    def format_chat_item(self, text, is_mine=False):
        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è
        item = QtWidgets.QListWidgetItem(text)
        if is_mine:
            item.setTextAlignment(QtCore.Qt.AlignRight)
        else:
            item.setTextAlignment(QtCore.Qt.AlignLeft)
        return item

    def send_chat_message(self):
        txt = self.chat_input.text().strip()
        if not txt:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —á–∞—Ç
        if not hasattr(self, 'current_chat_uuid') or not self.current_chat_uuid:
            self.chat_view.addItem(self.format_chat_item("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞", is_mine=False))
            return
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API
        self.send_message_to_api(self.current_chat_uuid, txt)
        
        # –õ–æ–∫–∞–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
        self.chat_view.addItem(self.format_chat_item(txt, is_mine=True))
        self.chat_input.clear()
    
    def send_message_to_api(self, receiver_uuid, message):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∞–∫–∫–∞—É–Ω—Ç
            accounts = load_accounts()
            if not accounts or not accounts[0].get('accessToken'):
                return
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            session = requests.Session()
            headers = get_auth_headers()
            data = {
                'receiver_uuid': receiver_uuid,
                'message': message
            }
            response = session.post(f"{BACKEND_BASE_URL}/api/chat/send", json=data, headers=headers, timeout=10)
            
            if response.status_code != 200:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.status_code}")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ API: {e}")

    def reload_friends_list(self):
        self.friends_list.clear()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ API
        friends_from_api = self.load_friends_from_api()
        
        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã—Ö –¥—Ä—É–∑–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        local_friends = load_friends()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–ø–∏—Å–∫–∏, –∏–∑–±–µ–≥–∞—è –¥—É–±–ª–µ–π
        all_friends = friends_from_api.copy()
        
        for local_friend in local_friends:
            local_username = local_friend.get("username", "")
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ –¥—Ä—É–≥–∞ –∏–∑ API
            if not any(f['nickname'] == local_username for f in friends_from_api):
                all_friends.append({
                    'nickname': local_username,
                    'uuid': local_friend.get('uuid', ''),
                    'friendship_date': local_friend.get('added_date', ''),
                    'avatar_path': local_friend.get('avatar_path')
                })
        
        # –¢–∞–∫–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
        friend_requests = self.load_friend_requests_from_api()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥—Ä—É–∑–µ–π
        for friend in all_friends:
            username = friend.get("nickname", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π")
            avatar_path = friend.get("avatar_path")
            friend_uuid = friend.get("uuid", "")
            
            # –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(QtCore.QSize(240, 52))
            widget = QtWidgets.QWidget()
            h = QtWidgets.QHBoxLayout(widget)
            h.setContentsMargins(8, 4, 8, 4)
            h.setSpacing(6)
            
            # –ê–≤–∞—Ç–∞—Ä
            avatar_label = QtWidgets.QLabel()
            avatar_label.setFixedSize(40, 40)
            avatar_label.setStyleSheet("background-color:#3a3a3a; border-radius:4px;")
            if avatar_path and os.path.exists(avatar_path):
                pix = QtGui.QPixmap(avatar_path).scaled(40, 40, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
                avatar_label.setPixmap(pix)
            
            # –ù–∏–∫
            name_label = QtWidgets.QLabel(username)
            name_label.setStyleSheet("color:#ffffff;")
            
            # –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞
            chat_btn = QtWidgets.QPushButton("–ß–∞—Ç")
            chat_btn.setStyleSheet("""
                QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:4px; padding:4px 8px; }
                QPushButton:hover { background-color:#508acc; }
            """)
            chat_btn.clicked.connect(lambda _, u=username, uuid=friend_uuid: self.open_chat_with_uuid(u, uuid))
            
            h.addWidget(avatar_label)
            h.addWidget(name_label, 1)
            h.addWidget(chat_btn)
            widget.setLayout(h)
            self.friends_list.addItem(item)
            self.friends_list.setItemWidget(item, widget)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è
        for request in friend_requests:
            sender_name = request.get("sender_nickname", "–ë–µ–∑—ã–º—è–Ω–Ω—ã–π")
            request_id = request.get("id")
            
            # –≠–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
            item = QtWidgets.QListWidgetItem()
            item.setSizeHint(QtCore.QSize(240, 60))
            widget = QtWidgets.QWidget()
            widget.setStyleSheet("background-color: rgba(255, 165, 0, 50); border-radius: 4px;")
            h = QtWidgets.QVBoxLayout(widget)
            h.setContentsMargins(8, 4, 8, 4)
            h.setSpacing(2)
            
            # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–ø—Ä–æ—Å–∞
            title_label = QtWidgets.QLabel(f"–ó–∞–ø—Ä–æ—Å –æ—Ç {sender_name}")
            title_label.setStyleSheet("color:#ffaa00; font-weight:bold; font-size:11px;")
            h.addWidget(title_label)
            
            # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
            btn_layout = QtWidgets.QHBoxLayout()
            btn_layout.setSpacing(4)
            
            accept_btn = QtWidgets.QPushButton("–ü—Ä–∏–Ω—è—Ç—å")
            accept_btn.setFixedSize(65, 25)
            accept_btn.setStyleSheet("""
                QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:3px; font-size:10px; }
                QPushButton:hover { background-color:#508acc; }
            """)
            accept_btn.clicked.connect(lambda _, rid=request_id: self.accept_friend_request(rid))
            
            decline_btn = QtWidgets.QPushButton("–û—Ç–∫–ª–æ–Ω–∏—Ç—å")
            decline_btn.setFixedSize(65, 25)
            decline_btn.setStyleSheet("""
                QPushButton { background-color:#e06c75; color:#fff; border:none; border-radius:3px; font-size:10px; }
                QPushButton:hover { background-color:#c86470; }
            """)
            decline_btn.clicked.connect(lambda _, rid=request_id: self.decline_friend_request(rid))
            
            btn_layout.addWidget(accept_btn)
            btn_layout.addWidget(decline_btn)
            btn_layout.addStretch()
            
            h.addLayout(btn_layout)
            widget.setLayout(h)
            self.friends_list.addItem(item)
            self.friends_list.setItemWidget(item, widget)

    def load_friends_from_api(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            accounts = load_accounts()
            if not accounts or not accounts[0].get('accessToken'):
                return []
                
            session = requests.Session()
            headers = get_auth_headers()
            response = session.get(f"{BACKEND_BASE_URL}/api/friends", headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('friends', [])
            
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä—É–∑–µ–π —á–µ—Ä–µ–∑ API: {e}")
            return []
    
    def load_friend_requests_from_api(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ –¥—Ä—É–∑—å—è —á–µ—Ä–µ–∑ API"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            accounts = load_accounts()
            if not accounts or not accounts[0].get('accessToken'):
                return []
                
            session = requests.Session()
            headers = get_auth_headers()
            response = session.get(f"{BACKEND_BASE_URL}/api/friends/requests", headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    return data.get('requests', [])
            
            return []
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –¥—Ä—É–∑—å—è —á–µ—Ä–µ–∑ API: {e}")
            return []
    
    def accept_friend_request(self, request_id):
        """–ü—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è"""
        try:
            session = requests.Session()
            headers = get_auth_headers()
            response = session.post(f"{BACKEND_BASE_URL}/api/friends/requests/{request_id}/accept", headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
                    self.reload_friends_list()
                    QtWidgets.QMessageBox.information(self.MainWindow, "–£—Å–ø–µ—Ö", "–ó–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!")
                else:
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: {e}")
            QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—è—Ç—å –∑–∞–ø—Ä–æ—Å")
    
    def decline_friend_request(self, request_id):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è"""
        try:
            session = requests.Session()
            headers = get_auth_headers()
            response = session.post(f"{BACKEND_BASE_URL}/api/friends/requests/{request_id}/decline", headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π
                    self.reload_friends_list()
                    QtWidgets.QMessageBox.information(self.MainWindow, "–£—Å–ø–µ—Ö", "–ó–∞–ø—Ä–æ—Å –æ—Ç–∫–ª–æ–Ω–µ–Ω")
                else:
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", data.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
            
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: {e}")
            QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
    
    def open_chat_with_uuid(self, username, uuid):
        """–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ UUID"""
        self.current_chat_uuid = uuid
        self.current_chat_username = username
        self.load_chat_history(uuid)
        # –ï—Å–ª–∏ friends_panel –æ—Ç–∫—Ä—ã—Ç ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        if hasattr(self, 'friends_panel') and self.friends_panel.isVisible():
            self.chat_refresh_timer.start()
    
    def load_chat_history(self, receiver_uuid):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        try:
            session = requests.Session()
            headers = get_auth_headers()
            response = session.get(f"{BACKEND_BASE_URL}/api/chat/history/{receiver_uuid}?limit=50", headers=headers, timeout=10)
            
            if response.status_code == 200:
                data = response.json()
                if data.get('ok'):
                    self.chat_view.clear()
                    messages = data.get('messages', [])
                    chat_with = data.get('chat_with', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
                    self.chat_view.addItem(self.format_chat_item(f"–ß–∞—Ç —Å {chat_with}", is_mine=False))
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
                    for message in messages:
                        msg_text = message.get('message', '')
                        is_mine = message.get('is_mine', False)
                        timestamp = message.get('timestamp', '')
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
                        if timestamp:
                            try:
                                from datetime import datetime
                                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                                time_str = dt.strftime('%H:%M')
                                formatted_msg = f"[{time_str}] {msg_text}"
                            except:
                                formatted_msg = msg_text
                        else:
                            formatted_msg = msg_text
                            
                        self.chat_view.addItem(self.format_chat_item(formatted_msg, is_mine))
                    
                    # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
                    self.chat_view.scrollToBottom()
                    
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞: {e}")
            self.chat_view.clear()
            self.chat_view.addItem(self.format_chat_item(f"–ß–∞—Ç —Å {self.current_chat_username}", is_mine=False))

    def add_friend_dialog(self):
        # –î–∏–∞–ª–æ–≥ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–≥–∞ –ø–æ UUID —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –ø—Ä–æ—Ñ–∏–ª—è
        # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–∫—Ä—ã–≤–∞–µ–º –ø–∞–Ω–µ–ª—å, —á—Ç–æ–±—ã –Ω–∏—á—Ç–æ –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã–≤–∞–ª–æ –¥–∏–∞–ª–æ–≥
        was_panel_visible = False
        try:
            if hasattr(self, 'friends_panel') and self.friends_panel.isVisible():
                was_panel_visible = True
                self.friends_panel.setVisible(False)
        except Exception:
            pass

        dlg = QtWidgets.QDialog(self.MainWindow)
        dlg.setWindowFlags(QtCore.Qt.Dialog | QtCore.Qt.FramelessWindowHint)
        dlg.setWindowModality(QtCore.Qt.ApplicationModal)
        dlg.setStyleSheet("background-color:#333333; color:#ffffff;")
        dlg.setFixedSize(360, 260)
        dlg.setModal(True)
        layout = QtWidgets.QVBoxLayout(dlg)

        uuid_input = QtWidgets.QLineEdit()
        uuid_input.setPlaceholderText("UUID –∏–≥—Ä–æ–∫–∞")
        uuid_input.setStyleSheet("background-color:#44475a; color:#fff; border:none; border-radius:4px; padding:6px;")

        preview_group = QtWidgets.QGroupBox("–ü—Ä–æ—Ñ–∏–ª—å –∏–≥—Ä–æ–∫–∞:")
        preview_group.setStyleSheet("QGroupBox { border:1px solid #444444; border-radius:6px; margin-top:8px; } QGroupBox::title { subcontrol-origin: margin; left:8px; padding:0 4px; }")
        preview_layout = QtWidgets.QHBoxLayout(preview_group)
        avatar_preview = QtWidgets.QLabel()
        avatar_preview.setFixedSize(48, 48)
        avatar_preview.setStyleSheet("background-color:#3a3a3a; border-radius:4px;")
        name_preview = QtWidgets.QLabel("-")
        name_preview.setStyleSheet("color:#ffffff; font-weight:600;")
        preview_layout.addWidget(avatar_preview)
        preview_layout.addWidget(name_preview)

        fetch_btn = QtWidgets.QPushButton("–ù–∞–π—Ç–∏ –ø–æ UUID")
        fetch_btn.setStyleSheet("""
            QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:hover { background-color:#508acc; }
        """)

        add_btn = QtWidgets.QPushButton("–î–æ–±–∞–≤–∏—Ç—å")
        add_btn.setEnabled(False)
        add_btn.setStyleSheet("""
            QPushButton { background-color:#61afef; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:disabled { background-color:#3a6586; }
            QPushButton:hover:!disabled { background-color:#508acc; }
        """)

        cancel_btn = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")
        cancel_btn.setStyleSheet("""
            QPushButton { background-color:#444444; color:#fff; border:none; border-radius:4px; padding:6px 10px; }
            QPushButton:hover { background-color:#5a5a5a; }
        """)

        # –õ–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        resolved = {"username": None, "uuid": None, "avatar_path": None}

        def do_fetch():
            uid = uuid_input.text().strip()
            if not uid:
                return
            prof = fetch_profile_by_uuid(uid)
            if not prof or not prof.get("username"):
                name_preview.setText("–ù–µ –Ω–∞–π–¥–µ–Ω–æ")
                avatar_preview.setPixmap(QtGui.QPixmap())
                add_btn.setEnabled(False)
                return
            name_preview.setText(prof["username"])
            # –°–∫–∞—á–∏–≤–∞–µ–º –∞–≤–∞—Ç–∞—Ä –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤–∞—Ç–∞—Ä –∏–∑ –ª–∞—É–Ω—á–µ—Ä–∞ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–æ—Ñ–∏–ª—è)
            local_avatar = download_avatar(prof.get("avatar_url"), prof.get("uuid") or uid)
            if not local_avatar:
                # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∞–≤–∞—Ç–∞—Ä –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ—Ñ–∏–ª—è –ª–∞—É–Ω—á–µ—Ä–∞
                fallback = None
                try:
                    if os.path.exists(PROFILE_SETTINGS_FILE):
                        with open(PROFILE_SETTINGS_FILE, 'r', encoding='utf-8') as f:
                            ps = json.load(f)
                            fallback = ps.get('profile_avatar_path')
                except Exception:
                    fallback = None
                local_avatar = fallback
            if local_avatar and os.path.exists(local_avatar):
                pix = QtGui.QPixmap(local_avatar).scaled(48, 48, QtCore.Qt.KeepAspectRatio, QtCore.Qt.SmoothTransformation)
                avatar_preview.setPixmap(pix)
            else:
                avatar_preview.setPixmap(QtGui.QPixmap())
            resolved["username"] = prof["username"]
            resolved["uuid"] = prof.get("uuid") or uid
            resolved["avatar_path"] = local_avatar
            add_btn.setEnabled(True)

        def do_add():
            # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –î–æ–±–∞–≤–∏—Ç—å –±–µ–∑ –ø–æ–∏—Å–∫–∞ ‚Äî –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            if not resolved["username"] or not resolved["uuid"]:
                do_fetch()
            if not resolved["username"] or not resolved["uuid"]:
                try:
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ", "–°–Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ UUID –∏ –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–π—Ç–∏ –ø–æ UUID'.")
                except Exception:
                    pass
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è —á–µ—Ä–µ–∑ API
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                accounts = load_accounts()
                if not accounts or not accounts[0].get('accessToken'):
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π")
                    return
                
                session = requests.Session()
                headers = get_auth_headers()
                if not headers:
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–µ—Ä–µ–∑–∞–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
                    return
                
                data = {'uuid': resolved["uuid"]}
                response = session.post(f"{BACKEND_BASE_URL}/api/friends/request", json=data, headers=headers, timeout=10)
                
                # –ï—Å–ª–∏ 401 –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–∫–µ–Ω –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
                if response.status_code == 401:
                    sync_result = sync_token_with_backend()
                    if sync_result == True:
                        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                        headers = get_auth_headers()
                        response = session.post(f"{BACKEND_BASE_URL}/api/friends/request", json=data, headers=headers, timeout=10)
                    elif sync_result == "reauth_required":
                        # –¢–æ–∫–µ–Ω —É—Å—Ç–∞—Ä–µ–ª, –Ω—É–∂–Ω–∞ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
                        msg = QtWidgets.QMessageBox()
                        msg.setIcon(QtWidgets.QMessageBox.Warning)
                        msg.setWindowTitle("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
                        msg.setText("–í–∞—à —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —É—Å—Ç–∞—Ä–µ–ª.\n\n–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥—Ä—É–∑–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ.")
                        msg.addButton("–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è", QtWidgets.QMessageBox.AcceptRole)
                        msg.addButton("–û—Ç–º–µ–Ω–∞", QtWidgets.QMessageBox.RejectRole)
                        
                        auth_result = msg.exec_()
                        if auth_result == 0:  # –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è
                            clear_saved_accounts()
                            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π
                            self.notification_manager.stop_checking()
                            self.show_login_dialog()
                            # –ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞ —Å–Ω–æ–≤–∞
                        return
                
                if response.status_code == 200:
                    result = response.json()
                    if result.get('ok'):
                        QtWidgets.QMessageBox.information(self.MainWindow, "–£—Å–ø–µ—Ö", result.get('message', '–ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!'))
                        # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                        friends = load_friends()
                        # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –¥—É–±–ª—å –ø–æ UUID
                        if not any(f.get("uuid") == resolved["uuid"] for f in friends):
                            friends.append({
                                "username": resolved["username"],
                                "uuid": resolved["uuid"],
                                "avatar_path": resolved["avatar_path"]
                            })
                            save_friends(friends)
                        self.reload_friends_list()
                        dlg.accept()
                    else:
                        QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", result.get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'))
                elif response.status_code == 401:
                    msg = QtWidgets.QMessageBox()
                    msg.setIcon(QtWidgets.QMessageBox.Warning)
                    msg.setWindowTitle("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    msg.setText("–¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω.\n\n–î–ª—è —Ä–µ—à–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã:\n1. –û—Ç–∫—Ä–æ–π—Ç–µ —Å–∞–π—Ç AsetWorld\n2. –í—ã–π–¥–∏—Ç–µ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)\n3. –í–æ–π–¥–∏—Ç–µ –∑–∞–Ω–æ–≤–æ\n4. –í –ª–∞—É–Ω—á–µ—Ä–µ –Ω–∞–∂–º–∏—Ç–µ '–í–æ–π—Ç–∏' –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å")
                    msg.addButton("–û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç", QtWidgets.QMessageBox.AcceptRole)
                    msg.addButton("–ó–∞–∫—Ä—ã—Ç—å", QtWidgets.QMessageBox.RejectRole)
                    
                    result = msg.exec_()
                    if result == 0:  # –û—Ç–∫—Ä—ã—Ç—å —Å–∞–π—Ç
                        import webbrowser
                        webbrowser.open("http://89.250.150.135:5500")
                else:
                    QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {response.status_code}")
                    
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è: {e}")
                QtWidgets.QMessageBox.warning(self.MainWindow, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.")

        fetch_btn.clicked.connect(do_fetch)
        add_btn.clicked.connect(do_add)
        cancel_btn.clicked.connect(dlg.reject)

        btn_row = QtWidgets.QHBoxLayout()
        btn_row.addWidget(add_btn)
        btn_row.addWidget(cancel_btn)

        layout.addWidget(uuid_input)
        layout.addWidget(fetch_btn)
        layout.addWidget(preview_group)
        layout.addLayout(btn_row)

        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        try:
            geo = dlg.frameGeometry()
            geo.moveCenter(self.MainWindow.frameGeometry().center())
            dlg.move(geo.topLeft())
        except Exception:
            pass
        
        dlg.exec_()

        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–∞–Ω–µ–ª—å –≤ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        try:
            if was_panel_visible:
                self.friends_panel.setVisible(True)
                self.friends_panel.raise_()
                self.friends_panel.activateWindow()
        except Exception:
            pass

    def open_chat_with(self, username):
        # –ü—Ä–æ—Å—Ç–∞—è –∑–∞–≥–ª—É—à–∫–∞ ‚Äî –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ—á–∏—Å—Ç–∫–∞ –æ–∫–Ω–∞ —á–∞—Ç–∞
        self.chat_view.clear()
        self.chat_view.addItem(self.format_chat_item(f"–û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å {username}", is_mine=False))
    
    def on_friend_request_received(self, sender_name, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ –¥—Ä—É–∑—å—è"""
        logging.info(f"–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –≤ –¥—Ä—É–∑—å—è –æ—Ç {sender_name}: {message}")
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É, –Ω–∞–ø—Ä–∏–º–µ—Ä –∑–≤—É–∫–æ–≤–æ–π —Å–∏–≥–Ω–∞–ª
        # –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤

    def show_chat_notification(self, sender, message):
        # –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        notification = NotificationWidget(self.MainWindow, message, duration=7000)
        # –ö–∞—Å—Ç–æ–º–∏–∑–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–¥ —á–∞—Ç
        layout = notification.layout()
        if layout and layout.count() > 0:
            title_label = layout.itemAt(0).widget()
            if isinstance(title_label, QtWidgets.QLabel):
                title_label.setText(f'üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender}')
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É
        parent_rect = self.MainWindow.geometry()
        x = parent_rect.width() - notification.width() - 20
        y = parent_rect.height() - notification.height() - 20
        notification.move(x, y)
        notification.show_notification()

class CustomProgressBar(QtWidgets.QWidget):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.progress = 0
        self.message = "–ó–∞–≥—Ä—É–∑–∫–∞..."

    def setProgress(self, value):
        self.progress = value
        self.update()

    def setMessage(self, message):
        self.message = message
        self.update()

    def paintEvent(self, event):
        painter = QtGui.QPainter(self)
        rect = self.rect()

        # Draw border
        pen = QtGui.QPen(QtGui.QColor("#333333"))  # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü—ã —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ–Ω–æ–º –æ–∫–Ω–∞
        pen.setWidth(2)  # –¢–æ–ª—â–∏–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã
        painter.setPen(pen)
        painter.drawRect(rect.adjusted(0, 0, -1, -1))  # –†–∏—Å—É–µ–º –≥—Ä–∞–Ω–∏—Ü—É

        # Draw background
        painter.setBrush(QtGui.QColor("#333333"))  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ñ–æ–Ω–æ–º –æ–∫–Ω–∞
        painter.drawRect(rect.adjusted(1, 1, -2, -2))  # –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–ª—è —É—á–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü—ã

        # Draw progress
        progress_width = int((rect.width() - 2) * (self.progress / 100))  # –£—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É
        painter.setBrush(QtGui.QColor("#61afef"))  # –ì–æ–ª—É–±–æ–π —Ü–≤–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        painter.drawRect(1, 1, progress_width, rect.height() - 2)  # –£—á–∏—Ç—ã–≤–∞–µ–º –≥—Ä–∞–Ω–∏—Ü—É

        # Draw text
        painter.setPen(QtGui.QColor("#ffffff"))  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
        painter.drawText(rect, QtCore.Qt.AlignCenter, self.message)


class SplashScreen(QtWidgets.QDialog):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Splash Screen")
        self.setFixedSize(300, 300)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")

        layout = QtWidgets.QVBoxLayout(self)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ª–æ–≥–æ –∏ —Ç–µ–∫—Å—Ç–∞
        top_layout = QtWidgets.QHBoxLayout()
        top_layout.setContentsMargins(10, 10, 10, 0)  # –û—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞

        # –ò–∫–æ–Ω–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞
        self.icon_label = QtWidgets.QLabel(self)
        icon = QIcon(os.path.join(IMAGES_DIR, "–ê–≤–∞—Ç–∞—Ä–∫–∞ –ª–∞—É–Ω—á–µ—Ä–∞.png"))  # –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –≤–∞—à–µ–π –∏–∫–æ–Ω–∫–µ
        self.icon_label.setPixmap(icon.pixmap(25, 25))  # –†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏
        self.icon_label.setFixedSize(25, 25)
        top_layout.addWidget(self.icon_label)

        # –¢–µ–∫—Å—Ç AsetLauncher
        self.title_label = QtWidgets.QLabel("AsetLauncher")
        self.title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: #ffffff;")
        self.title_label.setContentsMargins(2, 0, 0, 0)  # –û—Ç—Å—Ç—É–ø —Å–ª–µ–≤–∞ 2 –ø–∏–∫—Å–µ–ª—è
        top_layout.addWidget(self.title_label)

        layout.addLayout(top_layout)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –±—ã–ª —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        layout.addStretch(1)

        # –ö–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.custom_progress_bar = CustomProgressBar(self)
        self.custom_progress_bar.setFixedSize(280, 30)  # –†–∞–∑–º–µ—Ä –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        layout.addWidget(self.custom_progress_bar, alignment=QtCore.Qt.AlignCenter)

        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–∂–∫—É, —á—Ç–æ–±—ã –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –±—ã–ª —Ç–æ—á–Ω–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        layout.addStretch(1)

        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ª–∞—É–Ω—á–µ—Ä–∞
        self.version_label = QtWidgets.QLabel("–í–µ—Ä—Å–∏—è 1.2")
        self.version_label.setStyleSheet("font-size: 10px; color: #888888;")
        self.version_label.setAlignment(QtCore.Qt.AlignLeft)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Ä—Å–∏—é –ª–∞—É–Ω—á–µ—Ä–∞ –≤ —Å–∞–º—ã–π –Ω–∏–∑
        layout.addWidget(self.version_label)

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        self.progress_timer = QtCore.QTimer(self)
        self.progress_timer.timeout.connect(self.update_progress)
        self.progress_timer.start(50)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 50 –º—Å

        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_timer = QtCore.QTimer(self)
        self.message_timer.timeout.connect(self.update_message)
        self.message_timer.start(3000)  # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã

        self.progress = 0
        self.messages = [
            "–ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ",
            "–ü–µ—Ä–µ–¥–∞—ë–º –∞—É—Ä—É –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∏–≥—Ä—ã",
            "–ó–∞–≥—Ä—É–∑–∫–∞...",
            "–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞..."
        ]
        self.message_index = 0

    def update_progress(self):
        self.progress += 1
        self.custom_progress_bar.setProgress(self.progress)
        if self.progress >= 100:
            self.progress_timer.stop()
            self.message_timer.stop()
            self.accept()  # –ó–∞–∫—Ä—ã—Ç—å —ç–∫—Ä–∞–Ω –∑–∞–≥—Ä—É–∑–∫–∏

    def update_message(self):
        self.message_index = (self.message_index + 1) % len(self.messages)
        self.custom_progress_bar.setMessage(self.messages[self.message_index])

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ Mojang
def fetch_mojang_manifest():
    global _MOJANG_MANIFEST_CACHE
    if _MOJANG_MANIFEST_CACHE is not None:
        return _MOJANG_MANIFEST_CACHE
    url = "https://launchermeta.mojang.com/mc/game/version_manifest.json"
    try:
        response = requests.get(url, timeout=DEFAULT_HTTP_TIMEOUT)
        if response.status_code == 200:
            _MOJANG_MANIFEST_CACHE = response.json()
            return _MOJANG_MANIFEST_CACHE
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞ Mojang: {e}")
    print("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–∞–Ω–∏—Ñ–µ—Å—Ç Mojang.")
    return None

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –≤–µ—Ä—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Fabric)
def _get_local_version_json_path(version_id):
    version_dir = os.path.join(minecraft_directory, 'versions', version_id)
    return os.path.join(version_dir, f'{version_id}.json')

def is_version_in_mojang_manifest(version_id):
    manifest = fetch_mojang_manifest()
    if not manifest:
        return False
    return any(v.get('id') == version_id for v in manifest.get('versions', []))

def fetch_local_version_data(version_id):
    try:
        with open(_get_local_version_json_path(version_id), 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return None
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ version.json –¥–ª—è {version_id}: {e}")
        return None

def format_fabric_display_name(version_id):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ Fabric –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI"""
    if version_id.startswith('fabric-loader-') or 'fabric-loader-' in version_id:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–µ—Ä—Å–∏—é Minecraft –∏–∑ fabric-loader-0.15.11-1.20.1
        parts = version_id.split('-')
        if len(parts) >= 3:
            # –ù–∞—Ö–æ–¥–∏–º —á–∞—Å—Ç—å, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –≤–µ—Ä—Å–∏—è Minecraft (—Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ—á–∫–∏)
            for part in reversed(parts):
                if '.' in part and not part.startswith('0.'):  # –ò—Å–∫–ª—é—á–∞–µ–º –≤–µ—Ä—Å–∏–∏ –∑–∞–≥—Ä—É–∑—á–∏–∫–∞ –≤–∏–¥–∞ 0.x.x
                    return f"Fabric {part}"
        
        # Fallback: –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –≤–µ—Ä—Å–∏—é
        return version_id.replace('fabric-loader-', 'Fabric ')
    return version_id

def list_local_versions():
    versions_root = os.path.join(minecraft_directory, 'versions')
    results = []
    try:
        if not os.path.isdir(versions_root):
            return results
        for entry in os.listdir(versions_root):
            version_dir = os.path.join(versions_root, entry)
            if os.path.isdir(version_dir):
                json_path = os.path.join(version_dir, f"{entry}.json")
                if os.path.isfile(json_path):
                    results.append(entry)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π: {e}")
    return results

# –ü–∞—Ä—Å–∏–Ω–≥ —á–∏—Å–ª–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ Minecraft –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.20.1" –∏–∑ "fabric-loader-0.17.2-1.20.1")
def parse_minecraft_version_parts(version_str):
    try:
        m = re.search(r"(\d+)\.(\d+)(?:\.(\d+))?", version_str)
        if not m:
            return None
        major = int(m.group(1))
        minor = int(m.group(2))
        patch = int(m.group(3)) if m.group(3) else 0
        return [major, minor, patch]
    except Exception:
        return None

def resolve_inherits_from(version_id):
    local = fetch_local_version_data(version_id)
    if local and 'inheritsFrom' in local:
        return local['inheritsFrom']
    return None

def is_fabric_supported(vanilla_version_id):
    try:
        resp = requests.get(f"https://meta.fabricmc.net/v2/versions/loader/{vanilla_version_id}", timeout=DEFAULT_HTTP_TIMEOUT)
        if resp.status_code != 200:
            return False
        data = resp.json()
        return isinstance(data, list) and len(data) > 0
    except Exception:
        return False

def install_fabric_version(vanilla_version_id, minecraft_directory, loader_version=None, installer_version=None):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å Fabric –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ Minecraft –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ id."""
    try:
        # –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ –±–∞–∑–æ–≤–∞—è –≤–∞–Ω–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
        download_minecraft_version(vanilla_version_id, minecraft_directory)

        base_url = "https://meta.fabricmc.net/v2/versions"
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–≤—è–∑–∫—É: loader –±–µ—Ä—ë–º –∏–∑ loader/<game>, installer –∏–∑ /installer
        if not loader_version:
            resp = requests.get(f"{base_url}/loader/{vanilla_version_id}", timeout=DEFAULT_HTTP_TIMEOUT)
            resp.raise_for_status()
            combos = resp.json()
            if not combos:
                logging.error(f"Fabric –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏—é {vanilla_version_id}")
                return None
            # –ò—â–µ–º —Å—Ç–∞–±–∏–ª—å–Ω—ã–π loader, –∏–Ω–∞—á–µ –ø–µ—Ä–≤—ã–π
            stable = next((c for c in combos if c.get('loader', {}).get('stable')), None)
            chosen = stable or combos[0]
            loader_version = chosen['loader']['version']
        if not installer_version:
            resp_inst = requests.get(f"{base_url}/installer", timeout=DEFAULT_HTTP_TIMEOUT)
            resp_inst.raise_for_status()
            installers = resp_inst.json()
            if not installers:
                logging.error("–°–ø–∏—Å–æ–∫ –≤–µ—Ä—Å–∏–π Fabric installer –ø—É—Å—Ç")
                return None
            stable_inst = next((i for i in installers if i.get('stable')), None)
            installer_version = (stable_inst or installers[0])['version']

        # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ç–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å JSON, —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π —Å –ª–∞—É–Ω—á–µ—Ä–æ–º (installer –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
        profile_url = f"{base_url}/loader/{vanilla_version_id}/{loader_version}/profile/json"
        profile_resp = requests.get(profile_url, timeout=DEFAULT_HTTP_TIMEOUT)
        profile_resp.raise_for_status()
        profile = profile_resp.json()

        fabric_version_id = profile.get('id') or f"fabric-loader-{loader_version}-{vanilla_version_id}"

        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
        version_dir = os.path.join(minecraft_directory, 'versions', fabric_version_id)
        os.makedirs(version_dir, exist_ok=True)
        with open(os.path.join(version_dir, f"{fabric_version_id}.json"), 'w', encoding='utf-8') as f:
            json.dump(profile, f)

        logging.info(f"Fabric –ø—Ä–æ—Ñ–∏–ª—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {fabric_version_id}")
        return fabric_version_id
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Fabric –¥–ª—è {vanilla_version_id}: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–µ—Ä—Å–∏–∏ Minecraft
def download_minecraft_version(version_id, minecraft_directory):
    manifest = fetch_mojang_manifest()
    if not manifest:
        return False

    version_info = next((v for v in manifest['versions'] if v['id'] == version_id), None)
    if not version_info:
        print(f"–í–µ—Ä—Å–∏—è {version_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ.")
        return False

    version_url = version_info['url']
    version_data = requests.get(version_url, timeout=DEFAULT_HTTP_TIMEOUT).json()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏ —Ö–µ—à –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–≥–æ jar
    client_url = version_data['downloads']['client']['url']
    client_path = os.path.join(minecraft_directory, 'versions', version_id, f'{version_id}.jar')
    
    if os.path.exists(client_path):
        logging.info(f"‚úÖ Minecraft {version_id} —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
        return True

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä—É—é —Ñ—É–Ω–∫—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏
    logging.info(f"üéÆ –ó–∞–≥—Ä—É–∑–∫–∞ Minecraft {version_id}...")
    if download_file_fast(client_url, client_path, f"Minecraft {version_id}"):
        logging.info(f"‚úÖ Minecraft {version_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω.")
    return True

def download_file_fast(url, path, description="—Ñ–∞–π–ª"):
    """–ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        os.makedirs(os.path.dirname(path), exist_ok=True)
        logging.info(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ {description}: {os.path.basename(path)}")
        
        with requests.get(url, stream=True, timeout=30) as response:
            response.raise_for_status()
            total_size = int(response.headers.get('content-length', 0))
            
            with open(path, 'wb') as f:
                downloaded = 0
                for chunk in response.iter_content(chunk_size=16384):  # –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä —á–∞–Ω–∫–∞
                    if chunk:
                        f.write(chunk)
                        downloaded += len(chunk)
                        
        logging.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω {description}: {os.path.basename(path)} ({downloaded} –±–∞–π—Ç)")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {description} {url}: {str(e)}")
        return False

def download_multiple_files(downloads, max_workers=4):
    """–ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤"""
    logging.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É {len(downloads)} —Ñ–∞–π–ª–æ–≤ (–ø–æ—Ç–æ–∫–æ–≤: {max_workers})")
    
    def download_task(download_info):
        url, path, description = download_info
        if not os.path.exists(path):
            return download_file_fast(url, path, description)
        else:
            logging.info(f"‚è≠Ô∏è  {description} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {os.path.basename(path)}")
            return True
    
    successful = 0
    failed = []
    
    with concurrent.futures.ThreadPoolExecutor(max_workers=max_workers) as executor:
        future_to_download = {executor.submit(download_task, download): download for download in downloads}
        
        for future in concurrent.futures.as_completed(future_to_download):
            download = future_to_download[future]
            try:
                result = future.result()
                if result:
                    successful += 1
                else:
                    failed.append(download)
            except Exception as e:
                logging.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {download[0]}: {str(e)}")
                failed.append(download)
    
    logging.info(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–≥—Ä—É–∑–∫–∏: {successful} —É—Å–ø–µ—à–Ω–æ, {len(failed)} –Ω–µ—É–¥–∞—á")
    return successful, failed

def extract_natives(native_path, natives_dir):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ JAR —Ñ–∞–π–ª–∞ –≤ –ø–∞–ø–∫—É natives"""
    try:
        with zipfile.ZipFile(native_path, 'r') as zip_ref:
            for file in zip_ref.namelist():
                if file.endswith('.dll') or file.endswith('.so') or file.endswith('.dylib'):
                    zip_ref.extract(file, natives_dir)
                    logging.info(f"–ò–∑–≤–ª–µ—á–µ–Ω–∞ –Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {file}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–∞–∫–æ–≤–∫–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫ –∏–∑ {native_path}: {str(e)}")

def download_libraries(version_data, minecraft_directory):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Minecraft –≤ –ø–∞–ø–∫—É –≤–µ—Ä—Å–∏–∏ —Å –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ—Å—Ç—å—é"""
    version_id = version_data['id']
    version_dir = os.path.join(minecraft_directory, 'versions', version_id)
    libraries_dir = os.path.join(version_dir, 'libraries')
    natives_dir = os.path.join(version_dir, 'natives')
    
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    os.makedirs(libraries_dir, exist_ok=True)
    os.makedirs(natives_dir, exist_ok=True)
    
    libraries = version_data.get('libraries', [])
    total_libs = len(libraries)
    
    logging.info(f"üìö –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –±–∏–±–ª–∏–æ—Ç–µ–∫ –¥–ª—è –≤–µ—Ä—Å–∏–∏ {version_id} (–≤—Å–µ–≥–æ {total_libs})...")
    
    # –û—á–∏—â–∞–µ–º –ø–∞–ø–∫—É natives –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π
    if os.path.exists(natives_dir):
        for file in os.listdir(natives_dir):
            os.remove(os.path.join(natives_dir, file))
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    downloads = []
    natives_to_extract = []
    
    for library in libraries:
        name = library.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞')
        logging.debug(f"üì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é)
        rules_result = _should_include_for_windows(library.get('rules'))
        if not rules_result:
            logging.debug(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ {name} (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è Windows)")
            continue

        downloads_info = library.get('downloads', {})
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        artifact = downloads_info.get('artifact')
        if artifact:
            url = artifact['url']
            # –î–ª—è Fabric –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å –∏–∑ artifact.path
            if 'path' in artifact:
                path = os.path.join(libraries_dir, artifact['path'])
            else:
                path = os.path.join(libraries_dir, os.path.basename(artifact['url']))
            
            downloads.append((url, path, f"–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ {os.path.basename(path)}"))
        else:
            # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, Fabric) - —Å—Ç—Ä–æ–∏–º URL –ø–æ –∏–º–µ–Ω–∏
            logging.debug(f"üì¶ –ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ {name}: –Ω–µ—Ç artifact –≤ downloads, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback")
            try:
                # –ü–∞—Ä—Å–∏–º –∏–º—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ group:artifact:version
                name_parts = name.split(':')
                if len(name_parts) == 3:
                    group, artifact_name, version = name_parts
                    group_path = group.replace('.', '/')
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
                    base_url = library.get('url', 'https://libraries.minecraft.net/')
                    if 'fabricmc.net' in base_url:
                        # –î–ª—è Fabric –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö Maven —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
                        url = f"{base_url}{group_path}/{artifact_name}/{version}/{artifact_name}-{version}.jar"
                    else:
                        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π URL –¥–ª—è –±–∏–±–ª–∏–æ—Ç–µ–∫ Minecraft
                        url = f"https://libraries.minecraft.net/{group_path}/{artifact_name}/{version}/{artifact_name}-{version}.jar"
                    
                    path = os.path.join(libraries_dir, f"{artifact_name}-{version}.jar")
                    downloads.append((url, path, f"–±–∏–±–ª–∏–æ—Ç–µ–∫–∞ fallback {artifact_name}-{version}.jar"))
                else:
                    logging.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∏–º—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {name}")
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ {name} (fallback): {str(e)}")
                continue
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        classifiers = downloads_info.get('classifiers', {})
        if classifiers:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –Ω–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è Windows
            native_keys = ['natives-windows', 'natives-windows-64']
            for native_key in native_keys:
                if native_key in classifiers:
                    native = classifiers[native_key]
                    # –î–ª—è Fabric –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –ø—É—Ç—å
                    if 'path' in native:
                        native_path = os.path.join(libraries_dir, native['path'])
                    else:
                        native_path = os.path.join(libraries_dir, os.path.basename(native['url']))
                    
                    downloads.append((native['url'], native_path, f"–Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ {os.path.basename(native_path)}"))
                    natives_to_extract.append(native_path)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π LWJGL (–¥–ª—è –≤–µ—Ä—Å–∏–π –¥–æ 1.19)
        if 'natives' in library:
            try:
                natives = library['natives']
                if 'windows' in natives:
                    native_suffix = natives['windows'].replace('${arch}', 'x64')
                    name_parts = library['name'].split(':')
                    if len(name_parts) == 3:
                        group, artifact, version = name_parts
                        group_path = group.replace('.', '/')
                        native_name = f"{artifact}-{version}-{native_suffix}.jar"
                        url = f"https://libraries.minecraft.net/{group_path}/{artifact}/{version}/{native_name}"
                        native_path = os.path.join(libraries_dir, native_name)
                        
                        downloads.append((url, native_path, f"—Å—Ç–∞—Ä–∞—è –Ω–∞—Ç–∏–≤–Ω–∞—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ {native_name}"))
                        natives_to_extract.append(native_path)
            except Exception as e:
                logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ä–æ–π –Ω–∞—Ç–∏–≤–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {str(e)}")

    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
    if downloads:
        successful, failed = download_multiple_files(downloads, max_workers=6)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        logging.info(f"üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–∞—Ç–∏–≤–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        for native_path in natives_to_extract:
            if os.path.exists(native_path):
                extract_natives(native_path, natives_dir)
        
        logging.info(f"üìö –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, –Ω–µ—É–¥–∞—á: {len(failed)}")
        return successful > 0
    else:
        logging.info(f"üìö –í—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        return True

def download_assets(version_data, minecraft_directory):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞—Å—Å–µ—Ç—ã –∏–≥—Ä—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤"""
    # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è –≤–µ—Ä—Å–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, Fabric), –±–µ—Ä–µ–º –∞—Å—Å–µ—Ç—ã –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–∞–Ω–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
    if 'assetIndex' not in version_data:
        inherits = version_data.get('inheritsFrom')
        if inherits:
            logging.info(f"–í–µ—Ä—Å–∏—è –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è –æ—Ç {inherits}, –∑–∞–≥—Ä—É–∂–∞–µ–º –∞—Å—Å–µ—Ç—ã –æ—Ç—Ç—É–¥–∞")
            base_data = fetch_version_data(inherits)
            if not base_data or 'assetIndex' not in base_data:
                logging.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Å–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")
                return False
            version_data = base_data
        else:
            logging.error("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –∞—Å—Å–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return False

    asset_index = version_data['assetIndex']
    index_url = asset_index['url']
    
    assets_dir = os.path.join(minecraft_directory, 'assets')
    indexes_dir = os.path.join(assets_dir, 'indexes')
    objects_dir = os.path.join(assets_dir, 'objects')
    
    os.makedirs(indexes_dir, exist_ok=True)
    os.makedirs(objects_dir, exist_ok=True)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞
    index_path = os.path.join(indexes_dir, f"{asset_index['id']}.json")
    if not os.path.exists(index_path):
        with requests.get(index_url, timeout=DEFAULT_HTTP_TIMEOUT) as r:
            with open(index_path, 'wb') as f:
                f.write(r.content)

    # –ß–∏—Ç–∞–µ–º –∏–Ω–¥–µ–∫—Å
    with open(index_path, 'r') as f:
        index_data = json.load(f)

    total_assets = len(index_data['objects'])
    
    logging.info(f"üé® –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ (–≤—Å–µ–≥–æ {total_assets})...")
    
    # –°–æ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    downloads = []
    existing_count = 0
    
    for obj_path, obj_data in index_data['objects'].items():
        hash_value = obj_data['hash']
        hash_path = os.path.join(objects_dir, hash_value[:2], hash_value)
        
        if os.path.exists(hash_path):
            existing_count += 1
            continue

        url = f"https://resources.download.minecraft.net/{hash_value[:2]}/{hash_value}"
        downloads.append((url, hash_path, f"–∞—Å—Å–µ—Ç {hash_value[:8]}..."))
    
    logging.info(f"üé® –ù–∞–π–¥–µ–Ω–æ {existing_count} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∞—Å—Å–µ—Ç–æ–≤, –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å {len(downloads)}")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É –∞—Å—Å–µ—Ç–æ–≤
    if downloads:
        successful, failed = download_multiple_files(downloads, max_workers=8)
        logging.info(f"üé® –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {successful}, –Ω–µ—É–¥–∞—á: {len(failed)}")
        return successful > 0
    else:
        logging.info(f"üé® –í—Å–µ –∞—Å—Å–µ—Ç—ã —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    return True

# –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–ø—É—Å–∫–∞ —Å —É—á–µ—Ç–æ–º modern-—Ñ–æ—Ä–º–∞—Ç–∞ "arguments"
def _should_include_for_windows(rules):
    if not rules:
        return True
    allowed = False
    for rule in rules:
        action = rule.get('action')
        os_rule = rule.get('os', {})
        os_name = os_rule.get('name')
        if action == 'allow':
            if not os_name or os_name == 'windows':
                allowed = True
        elif action == 'disallow':
            if os_name == 'windows':
                return False
    return allowed

def _expand_placeholders(value, ctx):
    if not isinstance(value, str):
        return value
    for k, v in ctx.items():
        value = value.replace('${' + k + '}', str(v))
    return value

def _resolve_argument_items(items, ctx):
    result = []
    for item in items or []:
        if isinstance(item, str):
            result.append(_expand_placeholders(item, ctx))
        elif isinstance(item, dict):
            if _should_include_for_windows(item.get('rules')):
                val = item.get('value')
                if isinstance(val, list):
                    result.extend([_expand_placeholders(v, ctx) for v in val])
                elif isinstance(val, str):
                    result.append(_expand_placeholders(val, ctx))
    return result

# –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Minecraft
# –¢–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –≤ classpath
def launch_minecraft(version_id, username, minecraft_directory):
    add_hosts_redirects()
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—É—Ç—å –≤ LAUNCHER_FILES_DIR –≤–º–µ—Å—Ç–æ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            settings_path = os.path.join(LAUNCHER_FILES_DIR, "launcher_settings.json") 
            with open(settings_path, "r") as f:
                settings = json.load(f)
                ram = settings.get('ram', 2)
                logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –û–ó–£: {ram} –ì–ë")  # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –û–ó–£
        except Exception as e:
            ram = 2
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {str(e)}, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –û–ó–£ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2 –ì–ë")

        # –°–∫–∏–Ω—ã —É–¥–∞–ª–µ–Ω—ã
        logging.info("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø—É—Å–∫ Minecraft...")
        version_data = fetch_version_data(version_id)
        if not version_data:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è {version_id}")
            return

        version_dir = os.path.join(minecraft_directory, 'versions', version_id)
        libraries_dir = os.path.join(version_dir, 'libraries')
        natives_dir = os.path.join(version_dir, 'natives')

        # –ó–∞–≥—Ä—É–∑–∫–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫...")
        if not download_libraries(version_data, minecraft_directory):
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏")
            return
        logging.info("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Å—Å–µ—Ç–æ–≤
        logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –∏–≥—Ä–æ–≤—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤...")
        if not download_assets(version_data, minecraft_directory):
            logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–≥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã")
            return
        logging.info("–ò–≥—Ä–æ–≤—ã–µ —Ä–µ—Å—É—Ä—Å—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ JAR —Ñ–∞–π–ª–∞
        jar_path = os.path.join(version_dir, f'{version_id}.jar')
        if not os.path.exists(jar_path):
            # –ï—Å–ª–∏ –≤–µ—Ä—Å–∏—è –Ω–∞—Å–ª–µ–¥—É–µ—Ç—Å—è (Fabric), –∏—Å–ø–æ–ª—å–∑—É–µ–º jar –±–∞–∑–æ–≤–æ–π –≤–∞–Ω–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
            inherits = version_data.get('inheritsFrom')
            if inherits:
                base_jar = os.path.join(minecraft_directory, 'versions', inherits, f'{inherits}.jar')
                if not os.path.exists(base_jar):
                    # –ü—ã—Ç–∞–µ–º—Å—è —Å–∫–∞—á–∞—Ç—å –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
                    download_minecraft_version(inherits, minecraft_directory)
                if os.path.exists(base_jar):
                    jar_path = base_jar
                else:
                    logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä—ã: {version_id}.jar –∏ –±–∞–∑–æ–≤—ã–π {inherits}.jar")
                    return
            else:
                logging.error(f"–ù–µ –Ω–∞–π–¥–µ–Ω –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –∏–≥—Ä—ã: {version_id}.jar")
                return

        logging.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—É—Ç–µ–π –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º...")
        classpath = [jar_path]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ –≤–µ—Ä—Å–∏–æ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (Fabric)
        for file in os.listdir(libraries_dir):
            if file.endswith('.jar'):
                classpath.append(os.path.join(libraries_dir, file))
        
        # –î–ª—è Fabric —Ç–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–∞–Ω–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏
        inherits = version_data.get('inheritsFrom')
        if inherits:
            base_libraries_dir = os.path.join(minecraft_directory, 'versions', inherits, 'libraries')
            if os.path.exists(base_libraries_dir):
                logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏ {inherits}")
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ JAR —Ñ–∞–π–ª—ã –≤ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
                for root, dirs, files in os.walk(base_libraries_dir):
                    for file in files:
                        if file.endswith('.jar'):
                            base_lib_path = os.path.join(root, file)
                            if base_lib_path not in classpath:
                                classpath.append(base_lib_path)
                                logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {file}")
        
        # –î–ª—è –≤–∞–Ω–∏–ª—å–Ω—ã—Ö –≤–µ—Ä—Å–∏–π —Ç–æ–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ JAR –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ (–Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞—Ç–∏–≤–Ω—ã–µ)
        if not inherits:
            logging.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –≤–∞–Ω–∏–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ {version_id}")
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤—Å–µ JAR —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ libraries
            for root, dirs, files in os.walk(libraries_dir):
                for file in files:
                    if file.endswith('.jar'):
                        lib_path = os.path.join(root, file)
                        if lib_path not in classpath:
                            classpath.append(lib_path)
                            logging.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞: {file}")

        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ä–µ—Å—É—Ä—Å–∞–º
        asset_index = version_data.get('assetIndex', {}).get('id')
        if not asset_index:
            # –ï—Å–ª–∏ –Ω–µ—Ç assetIndex, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –≤–µ—Ä—Å–∏—é
            inherits = version_data.get('inheritsFrom')
            if inherits:
                base_data = fetch_version_data(inherits)
                if base_data and 'assetIndex' in base_data:
                    asset_index = base_data['assetIndex']['id']
                    logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º assetIndex –∏–∑ –±–∞–∑–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏: {asset_index}")
                else:
                    logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å assetIndex")
                    return
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å assetIndex")
                return
        
        logging.info("–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã –∑–∞–ø—É—Å–∫–∞...")
        java_args = [
            f'-Xmx{ram}G',
            '-XX:+UnlockExperimentalVMOptions',
            '-XX:+UseG1GC',
            '-XX:G1NewSizePercent=20',
            '-XX:G1ReservePercent=20',
            '-XX:MaxGCPauseMillis=50',
            '-XX:G1HeapRegionSize=32M',
            '-Djava.library.path=' + natives_dir,
            '-cp', os.pathsep.join(classpath),
        ]

        # –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ version.json (–æ—Å–æ–±–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã –¥–ª—è Fabric)
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç —Å —Ç–æ–∫–µ–Ω–æ–º ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        accounts = load_accounts()
        if accounts:
            acc = accounts[0]
            saved_name = acc.get('username') or username
            saved_uuid_nodash = acc.get('uuid')
            saved_access = acc.get('accessToken') or '0'
        else:
            saved_name = username
            saved_uuid_nodash = generate_offline_uuid(username, slim=get_saved_skin_is_slim()).replace('-', '')
            saved_access = '0'

        ctx = {
            'auth_player_name': saved_name,
            'version_name': version_id,
            'game_directory': minecraft_directory,
            'assets_root': os.path.join(minecraft_directory, 'assets'),
            'assets_index_name': asset_index,
            'auth_uuid': saved_uuid_nodash,
            'auth_access_token': saved_access,
            'clientid': '0',
            'user_type': 'legacy',
            'version_type': version_data.get('type', 'release')
        }

        game_args = [
            '--username', ctx['auth_player_name'],
            '--version', ctx['version_name'],
            '--gameDir', ctx['game_directory'],
            '--assetsDir', ctx['assets_root'],
            '--assetIndex', ctx['assets_index_name'],
            '--uuid', ctx['auth_uuid'],
            '--accessToken', ctx['auth_access_token'],
            '--clientId', ctx['clientid'],
            '--xuid', '0',
            '--userType', ctx['user_type']
        ]

        # –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç modern-—Ñ–æ—Ä–º–∞—Ç arguments, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        arguments = version_data.get('arguments')
        if arguments:
            jvm_from_profile = _resolve_argument_items(arguments.get('jvm'), ctx)
            if jvm_from_profile:
                # –£–¥–∞–ª—è–µ–º -Xmx/-Xms –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–¥–∞—ë–º –æ–±—ä—ë–º –û–ó–£ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                filtered_jvm = []
                for arg in jvm_from_profile:
                    if isinstance(arg, str) and (arg.startswith('-Xmx') or arg.startswith('-Xms')):
                        continue
                    filtered_jvm.append(arg)
                java_args = [f'-Xmx{ram}G'] + filtered_jvm + ['-Djava.library.path=' + natives_dir, '-cp', os.pathsep.join(classpath)]
            game_from_profile = _resolve_argument_items(arguments.get('game'), ctx)
            if game_from_profile:
                game_args = game_from_profile

        command = ['java'] + java_args + [version_data.get('mainClass', 'net.minecraft.client.main.Main')] + game_args

        # –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥–∏ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –≤ –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö
        problematic_flags = ['--demo', '--quickPlayPath', '--quickPlaySingleplayer', '--quickPlayMultiplayer', '--quickPlayRealms']
        
        for flag in problematic_flags:
            while flag in command:
                idx = command.index(flag)
                command.pop(idx)  # –£–±–∏—Ä–∞–µ–º —Å–∞–º —Ñ–ª–∞–≥
                # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ —Ñ–ª–∞–≥ (–Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å --), —É–±–∏—Ä–∞–µ–º –∏ –µ–≥–æ –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç
                if idx < len(command) and not command[idx].startswith('--'):
                    command.pop(idx)
                logging.info(f"–£–±—Ä–∞–Ω –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Ñ–ª–∞–≥: {flag}")
        
        logging.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—É—é—â–∏—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –£–±–∏—Ä–∞–µ–º –∞–≤—Ç–æ-–ø–æ–¥—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ—Å—É—Ä—Å-–ø–∞–∫–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫—Ä–∞—à–µ–π –ø—Ä–∏ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏

        logging.info("üöÄ –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã...")
        logging.info(f"üìã –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∏–≥—Ä—ã: {' '.join([arg for arg in command if arg.startswith('--')])}")
        logging.debug(f'üìù –ü–æ–ª–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∑–∞–ø—É—Å–∫–∞: {" ".join(command)}')
        
        try:
            process = subprocess.Popen(command, stdout=subprocess.PIPE, stderr=subprocess.PIPE, 
                                    creationflags=subprocess.CREATE_NO_WINDOW)
            
            while True:
                output = process.stdout.readline()
                if output == b'' and process.poll() is not None:
                    break
                if output:
                    logging.info(output.strip().decode())
                    
            _, stderr = process.communicate()
            if stderr:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {stderr.decode()}")
            else:
                logging.info(f"Minecraft {version_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
                
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Minecraft: {str(e)}")
            return
            
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {str(e)}")
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤–µ—Ä—Å–∏–∏ Minecraft
def fetch_version_data(version_id):
    # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –≤ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–º –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ
    manifest = fetch_mojang_manifest()
    if manifest:
        version_info = next((v for v in manifest['versions'] if v['id'] == version_id), None)
        if version_info:
            response = requests.get(version_info['url'], timeout=DEFAULT_HTTP_TIMEOUT)
            if response.status_code == 200:
                return response.json()
            else:
                logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –º–∞–Ω–∏—Ñ–µ—Å—Ç–∞.")

    # –§–æ–ª–ª–±–µ–∫: —á–∏—Ç–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π profile JSON (–Ω–∞–ø—Ä–∏–º–µ—Ä, Fabric)
    local = fetch_local_version_data(version_id)
    if local:
        return local

    logging.error(f"–í–µ—Ä—Å–∏—è {version_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –≤ –º–∞–Ω–∏—Ñ–µ—Å—Ç–µ, –Ω–∏ –ª–æ–∫–∞–ª—å–Ω–æ.")
    return None

class LauncherSettingsDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∞—É–Ω—á–µ—Ä–∞")
        self.setFixedSize(340, 260)
        self.setWindowFlags(QtCore.Qt.FramelessWindowHint)
        self.setStyleSheet("background-color: #333333; color: #ffffff;")
        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è (—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –ø—Ä–∏–≤—è–∑–∫–æ–π –∏ –ø–æ–≤–µ—Ä—Ö –∫–æ–Ω—Ç–µ–Ω—Ç–∞)
        try:
            self.close_btn = QtWidgets.QPushButton(self)
            self.close_btn.setFixedSize(25, 25)
            self.close_btn.setStyleSheet("""
                QPushButton { background-color:rgba(68,71,90,0); color:#ffffff; border:none; border-radius:4px; }
                QPushButton:hover { background-color:rgb(250,44,61); }
            """)
            close_icon = QtGui.QIcon(os.path.join(IMAGES_DIR, "Close.png"))
            self.close_btn.setIcon(close_icon)
            self.close_btn.setIconSize(QtCore.QSize(25, 25))
            self.close_btn.clicked.connect(self.close)
            attach_close_button(self, self.close_btn, margin=5)
            self.close_btn.raise_()
        except Exception:
            pass
        
        self.load_settings()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ (—É–º–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞)
        self.ram_label = QtWidgets.QLabel("–û–ó–£ –¥–ª—è Minecraft (–ì–ë):")
        self.ram_spin = QtWidgets.QSpinBox()
        total_gb = get_total_ram_gb()
        # –û—Å—Ç–∞–≤–ª—è–µ–º 2 –ì–ë —Å–∏—Å—Ç–µ–º–µ, –º–∏–Ω–∏–º—É–º 1 –ì–ë –¥–ª—è –≤—ã–±–æ—Ä–∞
        max_gb = max(1, total_gb - 2)
        self.ram_spin.setRange(1, max_gb)
        self.ram_spin.setValue(min(self.settings.get('ram', 2), max_gb))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è/–≤—ã–∫–ª—é—á–µ–Ω–∏—è —Å–Ω–µ–ø—à–æ—Ç–æ–≤
        self.snapshots_checkbox = QtWidgets.QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å–Ω–µ–ø—à–æ—Ç—ã")
        self.snapshots_checkbox.setChecked(self.settings.get('show_snapshots', False))

        # –ù–æ–≤—ã–π —á–µ–∫–±–æ–∫—Å: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å Fabric –≤ —Å–ø–∏—Å–∫–∞—Ö –≤–µ—Ä—Å–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–∫–ª—é—á–µ–Ω)
        self.fabric_checkbox = QtWidgets.QCheckBox("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å Fabric –≤–µ—Ä—Å–∏–∏")
        self.fabric_checkbox.setChecked(self.settings.get('show_fabric', False))

        # –ö–æ–Ω—Å–æ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∞
        
        # –ö–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã
        self.save_button = QtWidgets.QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.cancel_button = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∞")
        
        # –°—Ç–∏–ª–∏–∑–∞—Ü–∏—è
        button_style = """
            QPushButton {
                background-color: #61afef;
                color: #ffffff;
                border: none;
                border-radius: 4px;
                padding: 5px 10px;
                font-size: 12px;
            }
            QPushButton:hover {
                background-color: #508acc;
            }
        """
        self.save_button.setStyleSheet(button_style)
        self.cancel_button.setStyleSheet(button_style)
        self.ram_spin.setStyleSheet("background-color: #44475a; color: #ffffff;")
        self.snapshots_checkbox.setStyleSheet("color: #ffffff;")

        # –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        layout = QtWidgets.QVBoxLayout()
        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ–¥–ø–∏—Å—å –û–ó–£ –∏ –ø–æ–ª–µ –≤—ã–±–æ—Ä–∞ –≤–ø–ª–æ—Ç–Ω—É—é (–≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É)
        ram_layout = QtWidgets.QHBoxLayout()
        ram_layout.setContentsMargins(0, 0, 0, 0)
        ram_layout.setSpacing(0)
        ram_layout.addWidget(self.ram_label)
        ram_layout.addWidget(self.ram_spin)
        layout.addLayout(ram_layout)
        layout.addWidget(self.snapshots_checkbox)
        layout.addWidget(self.fabric_checkbox)
        
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.save_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
        
        self.setLayout(layout)
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–æ–≤
        self.save_button.clicked.connect(self.save_settings)
        self.cancel_button.clicked.connect(self.reject)

    def load_settings(self):
        self.settings_path = os.path.join(LAUNCHER_FILES_DIR, "launcher_settings.json")
        try:
            with open(self.settings_path, 'r') as f:
                self.settings = json.load(f)
        except:
            self.settings = {'ram': 2, 'show_snapshots': False, 'show_fabric': False}

    def save_settings(self):
        self.settings['ram'] = self.ram_spin.value()
        self.settings['show_snapshots'] = self.snapshots_checkbox.isChecked()
        self.settings['show_fabric'] = self.fabric_checkbox.isChecked()
        with open(self.settings_path, 'w') as f:
            json.dump(self.settings, f)
        self.accept()

    def open_console(self):
        QMessageBox.information(self, "–ö–æ–Ω—Å–æ–ª—å", "–ö–æ–Ω—Å–æ–ª—å –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

    # –£–¥–∞–ª–µ–Ω—ã –º–µ—Ç–æ–¥—ã —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Å–æ–ª—å—é —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    try:
        # Show splash screen
        splash = SplashScreen()
        if splash.exec_() == QtWidgets.QDialog.Accepted:
            MainWindow = QtWidgets.QMainWindow()
            ui = Ui_MainWindow()
            ui.setupUi(MainWindow)
            MainWindow.show()
        sys.exit(app.exec_())
    finally:
        remove_hosts_redirects()